module.exports = function () {
    return [
        {
            "title": "Open Source Accelerometer",
            "stringDate": "07-12-2014 04:57:30",
            "dc:creator": "tjdah10",
            "body": "Heyo! First blog post.\\n\\nI\\u0027ve been working on an open source accelerometer based on BlueGiga\\u0027s BLE112 Bluetooth Smart module and Bosch\\u0027s BMA250 accelerometer. The circuits I\\u0027m using were already pre-made by the classy fellows at Tiny-Circuits.\\n\\nI plan to eventually release the source code for both the Arduino Sketch and the Android App.\\n\\nTill then, let these images tide you over.\\n\\n\\u003c!--more--\\u003e\\n\\n\\u003cimg src\\u003d\\\"http://i.imgur.com/M9AVnMc.jpg\\\" alt\\u003d\\\"\\u0026quot;\\\" /\\u003e\\n\\n\\u003cimg src\\u003d\\\"http://i.imgur.com/eoEldpX.jpg\\\" alt\\u003d\\\"\\\" /\\u003e\\n\\n\\u0026nbsp;",
            "tags": [
                "Accelerometer",
                "Android",
                "Arduino",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart",
                "Bosch",
                "TinyDuino"
            ],
            "category": "Technology"
        },
        {
            "title": "Blogging Starts Now",
            "stringDate": "09-03-2014 11:19:20",
            "dc:creator": "tjdah10",
            "body": "Over the past 3 months I\\u0027ve been learning about Bluetooth Low Energy Communication,  Android apps, additive manufacturing using soft materials, the Arduino microprocessor and a host of other things. Now summer is over and I\\u0027ve been thrust back into my day job, which at this point is looking for a full time job. I\\u0027m still actively involved in all the projects I worked on during the summer, but in this transition phase I need to document my methods and procedures for students that will later be working on the projects I worked on.\\n\\n\\u003c!--more--\\u003e\\n\\n\\nLuckily, I have permission to post some of these methods into the public domain for the edification of others, so why not start a blog where I can discuss them in extreme detail?\\n\\nThe next couple of posts on this blog will discuss Bluetooth Low Energy almost exclusively. I will be sharing the nonsensitive source code I used for debugging, amongst other things. The code will embedded in their respective posts and at the end of it all, I will host a Github repository where anyone can download the source code and modify it for their own purposes.\\n\\nExcited? Well I am. Let\\u0027s begin.",
            "tags": [
                "Android",
                "Arduino",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": [
                "Design",
                "Technology"
            ]
        },
        {
            "title": "Bluetooth Low Energy, an Introduction",
            "stringDate": "09-03-2014 12:21:58",
            "dc:creator": "tjdah10",
            "body": "For Bluetooth Low Energy, henceforth abbreviated to BLE, perhaps the most important thing is recognizing device roles in your particular application.\\n\\nThere are 2 roles to be assumed:\\n\\u003col\\u003e\\n\\t\\u003cli\\u003eA GATT Client\\u003c/li\\u003e\\n\\t\\u003cli\\u003eA GATT Server\\u003c/li\\u003e\\n\\u003c/ol\\u003e\\n\\n\\u003c!--more--\\u003e\\n\\n\\nThe GATT Client is largely the brains behind the operation. The Client picks up on Servers that are advertising nearby and initiates the connection between the two. This connection may or may not be encrypted; it is largely dependent on the Client\\u0027s request, and to a lesser extent the implementation of the BLE API on the servers end. A single Client may be connected to multiple Servers and still pick up advertisement packets from nearby Servers.\\n\\nThe GATT Server as the name implies, exists to respond to requests of the Client. Upon successful connection after advertising, the Server provides the GATT profiles it supports to the Client and waits for the next request from Client. A Server can only be bound to one Client, and once connected / bound, it cannot advertise its presence again unless disconnected.\\n\\nAt this point, I will segue into the term introduced above: A GATT Profile, and some of the nuances around it and it\\u0027s children: GATT Services and GATT Characteristics.\\n\\u003ch1\\u003eGATT PROFILES\\u003c/h1\\u003e\\nTo lift from the official Bluetooth developer page:\\n\\u003cblockquote\\u003eThe GATT Profile specifies the structure in which profile data is exchanged. This structure defines basic elements such as services and characteristics, used in a profile. The top level of the hierarchy is a profile. A profile is composed of one or more services necessary to fulfill a use case. A service is composed of characteristics or references to other services. Each characteristic contains a value and may contain optional information about the value. The service and characteristic and the components of the characteristic (i.e., value and descriptors) contain the profile data and are all stored in attributes on the server.\\u003c/blockquote\\u003e\\nIn other words, if BLE were a sandwich, the GATT profile would be the bread, enclosing the lettuce and meat underneath: The GATT services and GATT characteristics. GATT profiles are identified with universally unique identifiers (UUIDs) which are a character String of hexadecimal units. The Bluetooth specification by default provides certain profiles for common scenarios, a list of them can be found here: \\u003ca href\\u003d\\\"https://developer.bluetooth.org/TechnologyOverview/Pages/Profiles.aspx#GATT\\\"\\u003eBluetooth GATT profiles\\u003c/a\\u003e\\n\\nThese GATT profiles all have UUIDs that are 16 bits in length. Should your particular application not have an applicable profile, you can define your own with its own UUID. Your custom UUID has to 128 bits long however, and you can create some for free here: \\u003ca href\\u003d\\\"http://www.guidgenerator.com/\\\"\\u003eCustom UUID Generator.\\u003c/a\\u003e\\n\\u003ch1\\u003eGATT SERVICES\\u003c/h1\\u003e\\nAgain, to quote someone much more eloquent, \\u003ca href\\u003d\\\"https://learn.adafruit.com/introduction-to-bluetooth-low-energy/gatt\\\"\\u003eAdafruit\\u003c/a\\u003e describes GATT Services as:\\n\\u003cblockquote\\u003eServices are used to break data up into logic entities, and contain specific chunks of data called characteristics. A service can have one or more characteristics, and each service distinguishes itself from other services by means of a unique numeric ID called a UUID, which can be either 16-bit (for officially adopted BLE Services) or 128-bit (for custom services).\\u003c/blockquote\\u003e\\nThey are identical to Profiles in the way UUIDs are assigned. When using a GATT service, it is not necessary to utilize all the GATT characteristics it provides. Adafruit mentions the \\u003ca href\\u003d\\\"https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u\\u003dorg.bluetooth.service.heart_rate.xml\\\"\\u003eHeart Rate Service\\u003c/a\\u003e which has 3 characteristic, of which only the \\u003ci\\u003eHeart Rate Measurement is mandatory. \\u003c/i\\u003eBoth the \\u003ci\\u003eBody Sensor Location\\u003c/i\\u003e and \\u003ci\\u003eHeart Rate Control Point \\u003c/i\\u003eare optional.\\n\\u003ch1\\u003eGATT CHARACTERISTICS\\u003c/h1\\u003e\\nBorrowing yet again from Adafruit:\\n\\u003cblockquote\\u003eThe lowest level concept in GATT transactions is the Characteristic, which encapsulates a single data point (though it may contain an array of related data, such as X/Y/Z values from a 3-axis accelerometer, etc.).\\n\\nSimilarly to Services, each Characteristic distinguishes itself via a pre-defined 16-bit or 128-bit UUID, and you\\u0027re free to use the \\u003ca href\\u003d\\\"https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicsHome.aspx\\\"\\u003estandard characteristics defined by the Bluetooth SIG\\u003c/a\\u003e (which ensures interoperability across and BLE-enabled HW/SW) or define your own custom characteristics which only your peripheral and SW understands.\\n\\nAs an example, the \\u003ca href\\u003d\\\"https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u\\u003dorg.bluetooth.characteristic.heart_rate_measurement.xml\\\"\\u003eHeart Rate Measurement characteristic\\u003c/a\\u003e is mandatory for the Heart Rate Service, and uses a UUID of 0x2A37. It starts with a single 8-bit value describing the HRM data format (whether the data is UINT8 or UINT16, etc.), and the goes on to include the heart rate measurement data that matches this config byte.\\n\\nCharacteristics are the main point that you will interact with your BLE peripheral, so it\\u0027s important to understand the concept. They are also used to send data back to the BLE peripheral, since you are also able to write to characteristic. You could implement a simple UART-type interface with a custom \\u0027UART Service\\u0027 and two characteristics, one for the TX channel and one for the RX channel, where one characteristic might be configured as read only and the other would have write privileges.\\u003c/blockquote\\u003e\\nSo there it is. A simple and mostly outsourced introduction to BLE. GATT Clients request data form GATT Servers who organize the data in a nested form consisting of GATT profiles, services and characteristics.\\n\\nIn an attempt to be original, and to build upon the sandwich analogy presented above, consider yourself to be at restaurant where you order sandwich. Your waiter has to wait for you to order, and what you want is what he provides. You ask for a certain sandwich, the bread is wheat, the meats are beef and bacon. You want your beef medium rare and your bacon fried to a lovely crisp. In BLE terms:\\n\\u003col\\u003e\\n\\t\\u003cli\\u003eYou - GATT Client\\u003c/li\\u003e\\n\\t\\u003cli\\u003eWaiter - GATT Server\\u003c/li\\u003e\\n\\t\\u003cli\\u003eBread - GATT Profile\\u003c/li\\u003e\\n\\t\\u003cli\\u003eMeats - GATT Services\\u003c/li\\u003e\\n\\t\\u003cli\\u003eMeat cooking options - GATT Characteristics\\u003c/li\\u003e\\n\\u003c/ol\\u003e\\nVoila! You have successfully built a rather delicious BLE dinner.",
            "tags": [
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": "Technology"
        },
        {
            "title": "A simple GATT Server, part 1",
            "stringDate": "09-04-2014 09:02:01",
            "dc:creator": "tjdah10",
            "body": "In the last post I discussed the two device roles ins BLE communication. Let\\u0027s dive into the latter role, the Server, for a bit.\\n\\n\\u003c!--more--\\u003e\\n\\n\\nWe know the server keeps that data available to it in a nested structure composed of GATT profiles, services and characteristics, where the characteristics are the items that actually hold data. To communicate with the GATT Client, these characteristics support 4 actions:\\n\\u003col\\u003e\\n\\t\\u003cli\\u003eWrite\\u003c/li\\u003e\\n\\t\\u003cli\\u003eRead\\u003c/li\\u003e\\n\\t\\u003cli\\u003eNotifications\\u003c/li\\u003e\\n\\t\\u003cli\\u003eIndications\\u003c/li\\u003e\\n\\u003c/ol\\u003e\\nThese 4 methods are used to transfer data. The first method, write, is used to send data from the Client to the server. The remaining 3 are used to get data from the Server to the Client. I\\u0027ll clarify these below.\\n\\nNOTE: BLE sends and receives data in bytes. Therefore only values between 0 and 255 \\\"should\\\" be passed to the constructors when attempting to send data... however, It appears you can \\\"lie\\\" to the compiler as answered in this \\u003ca href\\u003d\\\"http://stackoverflow.com/questions/5169692/assigning-negative-numbers-to-an-unsigned-int\\\"\\u003eStackoverflow\\u003c/a\\u003e question and successfully pass signed integers that will be stored just as well. I assume this is bad practice, but I was able to get away with it. It also made parsing the received data on the GATT client side a lot easier. So you shouldn\\u0027t?\\n\\nRead commands are fairly simple. The client simply requests to \\\"read\\\" a characteristic with a particular UUID, and the data is sent to the client as bytes. At any one time, the Server can only send packets that are limited to 22 bytes in length which is longer than the remaining methods; those are limited to 20 bytes.\\n\\nWrite commands are used to write bytes to a characteristic from the Client.\\n\\nNotifications are unacknowledged packets of data that will continually send out data as long that there is a client that is subscribed to them. Again, the packets of data are unacknowledged so if a particular notification packet is not transferred successfully, there is no flag. The next notification is just fired as scheduled. In the examples I demonstrate, this is what I\\u0027\\u0027 be using.\\n\\nIndications, like notifications require the client to be subscribed to them. However, each packet is acknowledged increasing reliability at the expense of speed.\\n\\nMy choice of hardware for BLE communication is the \\u003ca href\\u003d\\\"https://www.bluegiga.com/en-US/products/bluetooth-4.0-modules/ble112-bluetooth--smart-module/\\\"\\u003eBLE112\\u003c/a\\u003e by \\u003ca href\\u003d\\\"https://www.bluegiga.com/en-US/\\\"\\u003eBluegiga\\u003c/a\\u003e. For more in depth information and extremely thorough documentation of the BLE API to expand your BLE project, you should \\u003ca href\\u003d\\\"https://www.bluegiga.com/en-US/support/\\\"\\u003esign up for their support\\u003c/a\\u003e. It is free, and it is amazing. You will also find their forums to be extremely useful. When I first started out using BLE I trawled it significantly, and almost all the questions I had were already asked. The one\\u0027s that weren\\u0027t, I asked and I got speedy responses within the day. They are to class, top quality guys there.\\n\\nNow that we know characteristics support methods to send and receive data, how do we set up the characteristics to do so? For Bluegiga\\u0027s BLE112, this is very conveniently done using XML. Available from Bluegiga when you sign up is a software development kit (SDK) that allows you flash the firmware used on the BLE112. I\\u0027m going to share here the GATT profile structure used for my project.\\n\\u003cblockquote\\u003e\\u0026lt;?xml version\\u003d\\\"1.0\\\" encoding\\u003d\\\"UTF-8\\\" ?\\u0026gt;\\n\\u0026lt;configuration\\u0026gt;\\n\\n\\u0026lt;!-- 1800: org.bluetooth.service.generic_access --\\u0026gt;\\n\\u0026lt;service uuid\\u003d\\\"1800\\\" id\\u003d\\\"generic_access\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;Generic Access\\u0026lt;/description\\u0026gt;\\n\\n\\u0026lt;!-- 2A00: org.bluetooth.characteristic.gap.device_name --\\u0026gt;\\n\\u0026lt;characteristic uuid\\u003d\\\"2A00\\\" id\\u003d\\\"c_device_name\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;Device Name\\u0026lt;/description\\u0026gt;\\n\\u0026lt;properties read\\u003d\\\"true\\\" const\\u003d\\\"true\\\" /\\u0026gt;\\n\\u0026lt;value\\u0026gt;BGLib U1A1P 38.4NF\\u0026lt;/value\\u0026gt;\\n\\u0026lt;/characteristic\\u0026gt;\\n\\n\\u0026lt;!-- 2A01: org.bluetooth.characteristic.gap.appearance --\\u0026gt;\\n\\u0026lt;characteristic uuid\\u003d\\\"2A01\\\" id\\u003d\\\"c_appearance\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;Appearance\\u0026lt;/description\\u0026gt;\\n\\u0026lt;properties read\\u003d\\\"true\\\" const\\u003d\\\"true\\\" /\\u0026gt;\\n\\u0026lt;!-- 128: Generic Computer, Generic category --\\u0026gt;\\n\\u0026lt;value type\\u003d\\\"hex\\\"\\u0026gt;0080\\u0026lt;/value\\u0026gt;\\n\\u0026lt;/characteristic\\u0026gt;\\n\\u0026lt;/service\\u0026gt;\\n\\n\\u0026lt;!-- 180A: org.bluetooth.service.device_information --\\u0026gt;\\n\\u0026lt;service uuid\\u003d\\\"180A\\\" id\\u003d\\\"device_information\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;Device Information\\u0026lt;/description\\u0026gt;\\n\\n\\u0026lt;!-- 2A29: org.bluetooth.characteristic.manufacturer_name_string --\\u0026gt;\\n\\u0026lt;!-- (support for this characteristic is MANDATORY according to the profile spec) --\\u0026gt;\\n\\u0026lt;characteristic uuid\\u003d\\\"2A29\\\" id\\u003d\\\"c_manufacturer_name\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;Manufacturer Name\\u0026lt;/description\\u0026gt;\\n\\u0026lt;properties read\\u003d\\\"true\\\" const\\u003d\\\"true\\\" /\\u0026gt;\\n\\u0026lt;value\\u0026gt;SectorFej\\u0026lt;/value\\u0026gt;\\n\\u0026lt;/characteristic\\u0026gt;\\n\\n\\u0026lt;!-- 2A24: org.bluetooth.characteristic.model_number_string --\\u0026gt;\\n\\u0026lt;characteristic uuid\\u003d\\\"2A24\\\" id\\u003d\\\"c_model_number\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;Model Number\\u0026lt;/description\\u0026gt;\\n\\u0026lt;properties read\\u003d\\\"true\\\" const\\u003d\\\"true\\\" /\\u0026gt;\\n\\u0026lt;value\\u0026gt;SF-BGLIB\\u0026lt;/value\\u0026gt;\\n\\u0026lt;/characteristic\\u0026gt;\\n\\n\\u0026lt;/service\\u0026gt;\\n\\n\\u0026lt;!-- custom service for data transmission test --\\u0026gt;\\n\\u0026lt;service uuid\\u003d\\\"195AE58A-437A-489B-B0CD-B7C9C394BAE4\\\" id\\u003d\\\"data_transceiver\\\" advertise\\u003d\\\"true\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;Data transceiver service\\u0026lt;/description\\u0026gt;\\n\\n\\u0026lt;characteristic uuid\\u003d\\\"5FC569A0-74A9-4FA4-B8B7-8354C86E45A4\\\" id\\u003d\\\"c_rx_data\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;RX Data\\u0026lt;/description\\u0026gt;\\n\\u0026lt;properties write\\u003d\\\"true\\\" /\\u0026gt;\\n\\u0026lt;value variable_length\\u003d\\\"true\\\" length\\u003d\\\"20\\\"\\u0026gt;\\u0026lt;/value\\u0026gt;\\n\\u0026lt;/characteristic\\u0026gt;\\n\\n\\u0026lt;characteristic uuid\\u003d\\\"21819AB0-C937-4188-B0DB-B9621E1696CD\\\" id\\u003d\\\"c_tx_data\\\"\\u0026gt;\\n\\u0026lt;description\\u0026gt;TX Data\\u0026lt;/description\\u0026gt;\\n\\u0026lt;properties read\\u003d\\\"true\\\" notify\\u003d\\\"true\\\" indicate\\u003d\\\"true\\\" /\\u0026gt;\\n\\u0026lt;value variable_length\\u003d\\\"true\\\" length\\u003d\\\"20\\\"\\u0026gt;\\u0026lt;/value\\u0026gt;\\n\\u0026lt;/characteristic\\u0026gt;\\n\\n\\u0026lt;/service\\u0026gt;\\n\\n\\u0026lt;/configuration\\u0026gt;\\u003c/blockquote\\u003e\\nDo pardon the use of blockquotes, I plan to embed a Github gist when I figure out how.\\n\\nNote the threes services used:\\n\\u003col\\u003e\\n\\t\\u003cli\\u003eThe Generic Access Service\\u003c/li\\u003e\\n\\t\\u003cli\\u003eThe Device Information Service\\u003c/li\\u003e\\n\\t\\u003cli\\u003eThe custom service I\\u0027m using to read and write data to the two characteristics I have defined.\\u003c/li\\u003e\\n\\u003c/ol\\u003e\\nNote it is here that the characteristics are assigned whether they are read, write, notification or indication enabled. Also notice that a characteristic can utilize multiple properties, they just have to be specified within the \\u0026lt;properties\\u0026gt; tag.\\n\\nNext up is the hardware configuration xml:\\n\\u003cblockquote\\u003e\\u0026lt;?xml version\\u003d\\\"1.0\\\" encoding\\u003d\\\"UTF-8\\\" ?\\u0026gt;\\n\\u0026lt;hardware\\u0026gt;\\n\\u0026lt;sleeposc enable\\u003d\\\"true\\\" ppm\\u003d\\\"30\\\" /\\u0026gt;\\n\\u0026lt;usb enable\\u003d\\\"true\\\" endpoint\\u003d\\\"api\\\" /\\u0026gt;\\n\\u0026lt;txpower power\\u003d\\\"15\\\" bias\\u003d\\\"5\\\" /\\u0026gt;\\n\\u0026lt;usart mode\\u003d\\\"packet\\\" channel\\u003d\\\"1\\\" alternate\\u003d\\\"1\\\" baud\\u003d\\\"38400\\\" endpoint\\u003d\\\"api\\\" flow\\u003d\\\"false\\\" /\\u0026gt;\\n\\u0026lt;!--\\nUART PIN ASSIGNMENT TABLE:\\n+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\n| channel | alternate | RX | TX | RTS | CTS |\\n+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\n| 0 | 1 | P0_2 | P0_3 | P0_5 | P0_4 |\\n| 0 | 2 | P1_4 | P1_5 | P1_3 | P1_2 |\\n| 1 | 1 | P0_5 | P0_4 | P0_3 | P0_2 | (SELECTED)\\n| 1 | 2 | P1_7 | P1_6 | P1_5 | P1_4 |\\n+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d+\\n--\\u0026gt;\\n\\u0026lt;port index\\u003d\\\"0\\\" pull\\u003d\\\"down\\\" tristatemask\\u003d\\\"0\\\" /\\u0026gt;\\n\\u0026lt;port index\\u003d\\\"1\\\" pull\\u003d\\\"down\\\" tristatemask\\u003d\\\"0\\\" /\\u0026gt;\\n\\u0026lt;port index\\u003d\\\"2\\\" pull\\u003d\\\"down\\\" tristatemask\\u003d\\\"0\\\" /\\u0026gt;\\n\\u0026lt;/hardware\\u0026gt;\\u003c/blockquote\\u003e\\nAs you can see, this is where certain properties of the BLE112 module is set up. The only thing you\\u0027re likely to want to change here is the baud rate. The others are fairly nuanced and you would do well to read \\u003ca href\\u003d\\\"https://bluegiga.zendesk.com/entries/23173106--REFERENCE-BLE11x-low-power-and-sleep-modes\\\"\\u003eBluegiga\\u0027s\\u003c/a\\u003e \\u003ca href\\u003d\\\"https://bluegiga.zendesk.com/entries/45890933--REFERENCE-BGAPI-BGLib-Implementation-on-BLE-devices\\\"\\u003ereference\\u003c/a\\u003e to understand what they are and why you\\u0027d want to change them, most especially the wake up pin and flow mode.\\n\\nAll the files above and the actual project file you need to flash the BLE112 can be found on \\u003ca href\\u003d\\\"https://github.com/jrowberg/bglib/tree/master/BLEFirmware/BGLib_U1A1P_38400_noflow\\\"\\u003eJeff Rowberg\\u0027s Github\\u003c/a\\u003e. He\\u0027s the awesome guy that wrote the BGLib C library. To flash the BLE112, you will need Texas Instrument\\u0027s CC Debugger. Also, you will need to have access to the pins on the BLE112 to connect it to the debugger. This will be rather difficult if you don\\u0027t have the BLE112 connected to a breakout board with easy access to the pins. You can buy an already wired breakout board from Jeff Rowberg himself \\u003ca href\\u003d\\\"http://www.inmojo.com/store/jeff-rowberg/item/ble112-bluetooth-low-energy-breakout/\\\"\\u003ehere\\u003c/a\\u003e. It makes it incredibly easy to wire it to an Arduino Uno or whatever Arduino board you have.\\n\\nIn the second link in the above paragraph, you will see that Bluegiga has ported their BGLib library to various platforms so you may interact with the BGAPI used to communicate with the module. I personally am very fond of the C port as it is very easy to use with Arduino. It is what all my examples will be based on.\\n\\nAlso, for more information on characteristic characteristics (I\\u0027m immensely proud of that line), see this \\u003ca href\\u003d\\\"https://bluegiga.zendesk.com/entries/25053373--REFERENCE-BLE-master-slave-GATT-client-server-and-data-RX-TX-basics\\\"\\u003eBluegiga reference\\u003c/a\\u003e as well.\\n\\nIn the next post, I\\u0027ll show how to wire the BLE112 to an Arduino UNO.",
            "tags": [
                "Arduino",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": "Technology"
        },
        {
            "title": "A Simple GATT Server, Part 2",
            "stringDate": "09-05-2014 04:04:06",
            "dc:creator": "tjdah10",
            "body": "If you bought the breakout board linked in the previous post from Jeff Rowberg, congrats! It is already pre-flashed with the gatt.xml, hardware.xml and everything you\\u0027ll need to get it work immediately with the Arduino sketch to follow. If you didn\\u0027t, refer to \\u003ca href\\u003d\\\"https://bluegiga.zendesk.com/entries/22442106--HOW-TO-Using-the-BLE-Update-utility-to-program-a-BLE-module\\\"\\u003ethis\\u003c/a\\u003e to learn how to flash your BLE112.\\n\\n\\u003c!--more--\\u003e\\n\\nNow we\\u0027re ready to begin, awesome. You need only 4 wires to wire the BLE112:\\n\\u003col\\u003e\\n\\t\\u003cli\\u003ePower\\u003c/li\\u003e\\n\\t\\u003cli\\u003eGround\\u003c/li\\u003e\\n\\t\\u003cli\\u003eRX (Receiving pin)\\u003c/li\\u003e\\n\\t\\u003cli\\u003eTX (Transmitting pin)\\u003c/li\\u003e\\n\\u003c/ol\\u003e\\nThe RX and TX pins communicate with the Arduino via UART - the Arduino\\u0027s serial. Problem is, the Arduino\\u0027s serial is hardwired to pins 0 and 1 for the Arduino Uno. Therefore, you cannot simultaneously use the hardware serial on the Arduino and receive debug messages via the software serial on the Arduino\\u0027s serial monitor. To get around this, you may use a software serial library to mimic a UART interface between the BLE112 and Arduino Uno.\\n\\nIf you go the software serial route, I strongly recommend the \\u003ca href\\u003d\\\"https://www.pjrc.com/teensy/td_libs_AltSoftSerial.html\\\"\\u003eAltSoftSerial\\u003c/a\\u003e library. The default Software serial library \\u003ca href\\u003d\\\"http://arduino.cc/en/Reference/SoftwareSerial\\\"\\u003eSoftwareSerial\\u003c/a\\u003e is quite frankly poor. It is unstable,and you cannot simultaneously read and write which is something you may encounter; if you\\u0027re subscribed to notifications and you want to write to a characteristic for example.\\n\\nThe AltSoftSerial library supports simultaneous reading and writing, but it has 1 major caveat: for the Uno it must be used with pins 3 and 4, since it makes use of the 16 bit timer present in the ATMEGA 328 for its function. A small price to pay for fantastic quality in my opinion.\\n\\nNow let\\u0027s look at some Arduino code. The following code lets you read from characteristics, and lets you subscribe to notifications from those that support it. I haven\\u0027t written it to support writing or indications, but if you browse the API guide, it should be fairly easy to implement. The code has a lot of comments to help clarify things.\\n\\u003cblockquote\\u003e// Accelerometer demo sketch for TinyDuino\\n// Based onBluegiga BGLib Arduino interface library slave device stub sketch\\n// and accelerometer demo from TinyCitcuits\\n// 2013-06-30 by Ken Burns, TinyCircuits http://Tiny-Circuits.com\\n// 2014-02-12 by Jeff Rowberg \\u0026lt;jeff@rowberg.net\\u0026gt;\\n// 2014-07-13 modified by Adetunji Dahunsi \\u0026lt;tunjid.com\\u0026gt;\\n// Updates should (hopefully) always be available at https://github.com/jrowberg/bglib\\n//\\n\\n// Changelog:\\n// 2014-06-13 - Initial release\\n\\n/* \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n!!!!!!!!!!!!!!!!!\\n!!! IMPORTANT !!!\\n!!!!!!!!!!!!!!!!!\\n\\nTHIS SCRIPT WILL NOT COMMUNICATE PROPERLY IF YOU DO NOT ENSURE ONE OF THE\\nFOLLOWING IS TRUE:\\n\\n1. You enable the \\u0026lt;wakeup_pin\\u0026gt; functionality in your firmware\\n\\n2. You COMMENT OUT two lines below which depend on wake-up\\nfuncitonality to work properly (they will BLOCK otherwise):\\n\\nble112.onBeforeTXCommand \\u003d onBeforeTXCommand;\\nble112.onTXCommandComplete \\u003d onTXCommandComplete;\\n\\n/* \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\nBGLib Arduino interface library code is placed under the MIT license\\nCopyright (c) 2014 Jeff Rowberg\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n*/\\n\\n//#include \\u0026lt;SoftwareSerial.h\\u0026gt; // software serial library for input and output to the serial mnitor.\\n#include \\u0026lt;Wire.h\\u0026gt;\\n#include \\u0026lt;Math.h\\u0026gt;\\n#include \\\"BGLib.h\\\" // BGLib C library for BGAPI communication.\\n#include \\u0026lt;AltSoftSerial.h\\u0026gt; // software serial library for input and output to the serial mnitor.\\n\\n//#include \\u0026lt;SimpleTimer.h\\u0026gt; // I experienced increased overhead using the timer library, decided to ditch it. You may fare better. Will be trying it again soon.\\n\\n// uncomment the following line for debug serial output\\n#define DEBUG\\n\\nint x \\u003d 0;\\nboolean notifier \\u003d false; // variable to manage notification settings\\nuint8_t A[6] \\u003d {1, 2, 3, 4, 5, 6}; // integer array to carry accelerometer values\\nint count \\u003d 0; //Initially used to set notification frequency.\\n//SimpleTimer timer;\\n\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n// BLE STATE TRACKING (UNIVERSAL TO JUST ABOUT ANY BLE PROJECT)\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n\\n// BLE state machine definitions\\n#define BLE_STATE_STANDBY 0\\n#define BLE_STATE_SCANNING 1\\n#define BLE_STATE_ADVERTISING 2\\n#define BLE_STATE_CONNECTING 3\\n#define BLE_STATE_CONNECTED_MASTER 4\\n#define BLE_STATE_CONNECTED_SLAVE 5\\n\\n// BLE state/link status tracker\\nuint8_t ble_state \\u003d BLE_STATE_STANDBY;\\nuint8_t ble_encrypted \\u003d 0; // 0 \\u003d not encrypted, otherwise \\u003d encrypted\\nuint8_t ble_bonding \\u003d 0xFF; // 0xFF \\u003d no bonding, otherwise \\u003d bonding handle\\n\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n// HARDWARE CONNECTIONS AND GATT STRUCTURE SETUP\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n\\n// NOTE: this assumes you are using one of the following firmwares:\\n// - BGLib_U1A1P_38400_noflow ** I\\u0027m using this firmware.\\n// - BGLib_U1A1P_38400_noflow_wake16\\n// - BGLib_U1A1P_38400_noflow_wake16_hwake15\\n// If not, then you may need to change the pin assignments and/or\\n// GATT handles to match your firmware.\\n\\n#define LED_PIN 13 // Arduino Uno LED pin\\n\\n#define GATT_HANDLE_C_RX_DATA 17 // 0x11, supports \\\"write\\\" operation\\n#define GATT_HANDLE_C_TX_DATA 20 // 0x14, supports \\\"read\\\" and \\\"indicate\\\" operations\\n\\n//#define BLE_WAKEUP_PIN 5 // BLE Wake up pin\\n\\n// use SoftwareSerial on pins D3/D4 for RX/TX (Arduino side)\\nAltSoftSerial bleSerialPort(8, 9);  // Note the use of AltSoftware Serial.\\n\\n// Took 3 weeks of debugging to identify the non simultaneous SoftwareSerial as terrible for BLE.\\n\\n// create BGLib object:\\n// - use AltSoftSerial for for module comms\\n// - use nothing for passthrough comms (0 \\u003d null pointer)\\n// - enable packet mode on API protocol since flow control is unavailable\\n\\nBGLib ble112((HardwareSerial *)\\u0026amp;bleSerialPort, 0, 1);\\n\\n#define BGAPI_GET_RESPONSE(v, dType) dType *v \\u003d (dType *)ble112.getLastRXPayload()\\n\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n// ARDUINO APPLICATION SETUP AND LOOP FUNCTIONS\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n\\n// initialization sequence\\nvoid setup() {\\n\\n//Initialize accelerometer\\nWire.begin();\\nSerial.begin(38400);\\n\\n// initialize status LED\\npinMode(LED_PIN, OUTPUT);\\ndigitalWrite(LED_PIN, LOW);\\n\\n// set up internal status handlers (these are technically optional)\\nble112.onBusy \\u003d onBusy;\\nble112.onIdle \\u003d onIdle;\\nble112.onTimeout \\u003d onTimeout;\\n\\n// ONLY enable these if you are using the \\u0026lt;wakeup_pin\\u0026gt; parameter in your firmware\\u0027s hardware.xml file\\n// BLE module must be woken up before sending any UART data\\n//ble112.onBeforeTXCommand \\u003d onBeforeTXCommand;\\n//ble112.onTXCommandComplete \\u003d onTXCommandComplete;\\n\\n// set up BGLib event handlers\\nble112.ble_evt_system_boot \\u003d my_ble_evt_system_boot;\\nble112.ble_evt_connection_status \\u003d my_ble_evt_connection_status;\\nble112.ble_evt_connection_disconnected \\u003d my_ble_evt_connection_disconnect;\\nble112.ble_evt_attributes_value \\u003d my_ble_evt_attributes_value;\\nble112.ble_evt_attclient_indicated \\u003d my_ble_evt_attclient_indicated;\\nble112.ble_evt_attributes_status \\u003d my_ble_evt_attributes_status;\\n\\n// open Arduino USB serial (and wait, if we\\u0027re using Leonardo)\\n// use 38400 since it works at 8MHz as well as 16MHz\\nSerial.begin(38400);\\nwhile (!Serial);\\n\\n// open BLE software serial port\\nbleSerialPort.begin(38400);\\n\\nmy_ble_evt_system_boot( NULL);\\n\\n}\\n\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n// MAIN APPLICATION LOOP\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\nvoid loop() {\\n// keep polling for new data from BLE\\ncount++;\\nble112.checkActivity();\\n\\n// check for input from the user, allows you communicate to the\\n\\n// BLE module via the serial monitor for debugging\\nif (Serial.available()) {\\nuint8_t ch \\u003d Serial.read();\\nuint8_t status;\\nif (ch \\u003d\\u003d \\u00270\\u0027) {\\n// Reset BLE112 module\\nSerial.println(\\\"--\\u0026gt;\\\\tsystem_reset: { boot_in_dfu: 0 }\\\");\\nble112.ble_cmd_system_reset(0);\\nwhile ((status \\u003d ble112.checkActivity(1000)));\\n// system_reset doesn\\u0027t have a response, but this BGLib\\n// implementation allows the system_boot event specially to\\n// set the \\\"busy\\\" flag to false for this particular case\\n}\\n}\\n// Check if GATT Client (Smartphone) is subscribed to notifications.\\nif (notifier \\u003d\\u003d true) {\\n// Simple way of changing frequency of notifications. see documentation on WuMRC Github or // tunji.com/blog for more details on this.\\n\\nif (count \\u0026gt; 150) {\\nx \\u003d x + 1;\\nif(x \\u0026lt; 180) {\\nA[0] \\u003d (100 * sin((x*3.14)/180));\\nA[1] \\u003d (100 * cos((x*3.14)/180));\\nA[2] \\u003d (0);\\nA[3] \\u003d fabs((x * 0.66));\\n}\\nelse{\\nx \\u003d -180;\\n}\\n\\n//Write notification to characteristic on ble112. Causes notification to be sent.\\nble112.ble_cmd_attributes_write(GATT_HANDLE_C_TX_DATA, 0, 6 , A);\\n\\n// Reset count to zero\\ncount \\u003d 0;\\nSerial.println(millis());\\n}\\n}\\nelse {\\n// Do zilch, zip, nada, nothing if notifications are not enabled.\\n}\\n\\n// blink Arduino LED based on state:\\n// - solid \\u003d STANDBY\\n// - 1 pulse per second \\u003d ADVERTISING\\n// - 2 pulses per second \\u003d CONNECTED_SLAVE\\n// - 3 pulses per second \\u003d CONNECTED_SLAVE with encryption\\n\\nuint16_t slice \\u003d millis() % 1000;\\n\\nif (ble_state \\u003d\\u003d BLE_STATE_STANDBY) {\\ndigitalWrite(LED_PIN, HIGH);\\n}\\nif (ble_state \\u003d\\u003d BLE_STATE_ADVERTISING) {\\ndigitalWrite(LED_PIN, slice \\u0026lt; 100);\\n}\\nif (ble_state \\u003d\\u003d BLE_STATE_CONNECTED_SLAVE) {\\nif (!ble_encrypted) {\\ndigitalWrite(LED_PIN, slice \\u0026lt; 100 || (slice \\u0026gt; 200 \\u0026amp;\\u0026amp; slice \\u0026lt; 300));\\n}\\nelse {\\ndigitalWrite(LED_PIN, slice \\u0026lt; 100 || (slice \\u0026gt; 200 \\u0026amp;\\u0026amp; slice \\u0026lt; 300) || (slice \\u0026gt; 400 \\u0026amp;\\u0026amp; slice \\u0026lt; 500));\\n}\\n}\\n}\\n\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n// INTERNAL BGLIB CLASS CALLBACK FUNCTIONS\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n\\n// called when the module begins sending a command\\nvoid onBusy() {\\n// turn LED on when we\\u0027re busy\\n//digitalWrite(LED_PIN, HIGH);\\n\\n}\\n\\n// called when the module receives a complete response or \\\"system_boot\\\" event\\nvoid onIdle() {\\n// turn LED off when we\\u0027re no longer busy\\n// digitalWrite(LED_PIN, LOW);\\n}\\n\\n// called when the parser does not read the expected response in the specified time limit\\nvoid onTimeout() {\\n// reset module (might be a bit drastic for a timeout condition though)\\nSerial.println(\\\"Timed out.\\\");\\n\\n}\\n\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n// APPLICATION EVENT HANDLER FUNCTIONS\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n\\nvoid my_ble_evt_system_boot(const ble_msg_system_boot_evt_t *msg) {\\n#ifdef DEBUG\\nSerial.print(\\\"###\\\\tsystem_boot: { \\\");\\nSerial.print(\\\"major: \\\"); Serial.print(msg -\\u0026gt; major, HEX);\\nSerial.print(\\\", minor: \\\"); Serial.print(msg -\\u0026gt; minor, HEX);\\nSerial.print(\\\", patch: \\\"); Serial.print(msg -\\u0026gt; patch, HEX);\\nSerial.print(\\\", build: \\\"); Serial.print(msg -\\u0026gt; build, HEX);\\nSerial.print(\\\", ll_version: \\\"); Serial.print(msg -\\u0026gt; ll_version, HEX);\\nSerial.print(\\\", protocol_version: \\\"); Serial.print(msg -\\u0026gt; protocol_version, HEX);\\nSerial.print(\\\", hw: \\\"); Serial.print(msg -\\u0026gt; hw, HEX);\\nSerial.println(\\\" }\\\");\\n#endif\\n\\n// system boot means module is in standby state\\n//ble_state \\u003d BLE_STATE_STANDBY;\\n// ^^^ skip above since we\\u0027re going right back into advertising below\\n\\n// set advertisement interval to 200-300ms, use all advertisement channels\\n// (note min/max parameters are in units of 625 uSec)\\nble112.ble_cmd_gap_set_adv_parameters(320, 480, 7);\\nwhile (ble112.checkActivity(1000));\\n\\n// USE THE FOLLOWING TO LET THE BLE STACK HANDLE YOUR ADVERTISEMENT PACKETS\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n// start advertising general discoverable / undirected connectable\\n//ble112.ble_cmd_gap_set_mode(BGLIB_GAP_GENERAL_DISCOVERABLE, BGLIB_GAP_UNDIRECTED_CONNECTABLE);\\n//while (ble112.checkActivity(1000));\\n\\n// USE THE FOLLOWING TO HANDLE YOUR OWN CUSTOM ADVERTISEMENT PACKETS\\n// \\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\n\\n// build custom advertisement data\\n// default BLE stack value: 0201061107e4ba94c3c9b7cdb09b487a438ae55a19\\nuint8 adv_data[] \\u003d {\\n0x02, // field length\\nBGLIB_GAP_AD_TYPE_FLAGS, // field type (0x01)\\n0x06, // data (0x02 | 0x04 \\u003d 0x06, general discoverable + BLE only, no BR+EDR)\\n0x11, // field length\\nBGLIB_GAP_AD_TYPE_SERVICES_128BIT_ALL, // field type (0x07)\\n0xe4, 0xba, 0x94, 0xc3, 0xc9, 0xb7, 0xcd, 0xb0, 0x9b, 0x48, 0x7a, 0x43, 0x8a, 0xe5, 0x5a, 0x19\\n};\\n\\n// set custom advertisement data\\nble112.ble_cmd_gap_set_adv_data(0, 0x15, adv_data);\\nwhile (ble112.checkActivity(1000));\\n\\n// build custom scan response data (i.e. the Device Name value)\\n// default BLE stack value: 140942474c69622055314131502033382e344e4657\\nuint8 sr_data[] \\u003d {\\n0x14, // field length\\nBGLIB_GAP_AD_TYPE_LOCALNAME_COMPLETE, // field type\\n\\u0027C\\u0027, \\u0027h\\u0027, \\u0027i\\u0027, \\u0027p\\u0027, \\u0027 \\u0027, \\u0027D\\u0027, \\u0027e\\u0027, \\u0027b\\u0027, \\u0027u\\u0027, \\u0027g\\u0027,\\u0027 \\u0027, \\u00270\\u0027, \\u00270\\u0027, \\u0027:\\u0027, \\u00270\\u0027, \\u00270\\u0027, \\u0027:\\u0027, \\u00270\\u0027, \\u00270\\u0027\\n};\\n\\n// get BLE MAC address\\nble112.ble_cmd_system_address_get();\\nwhile (ble112.checkActivity(1000));\\nBGAPI_GET_RESPONSE(r0, ble_msg_system_address_get_rsp_t);\\n\\n// assign last three bytes of MAC address to ad packet friendly name (instead of 00:00:00 above)\\nsr_data[13] \\u003d (r0 -\\u0026gt; address.addr[2] / 0x10) + 48 + ((r0 -\\u0026gt; address.addr[2] / 0x10) / 10 * 7); // MAC byte 4 10\\u0027s digit\\nsr_data[14] \\u003d (r0 -\\u0026gt; address.addr[2] \\u0026amp; 0xF) + 48 + ((r0 -\\u0026gt; address.addr[2] \\u0026amp; 0xF ) / 10 * 7); // MAC byte 4 1\\u0027s digit\\nsr_data[16] \\u003d (r0 -\\u0026gt; address.addr[1] / 0x10) + 48 + ((r0 -\\u0026gt; address.addr[1] / 0x10) / 10 * 7); // MAC byte 5 10\\u0027s digit\\nsr_data[17] \\u003d (r0 -\\u0026gt; address.addr[1] \\u0026amp; 0xF) + 48 + ((r0 -\\u0026gt; address.addr[1] \\u0026amp; 0xF ) / 10 * 7); // MAC byte 5 1\\u0027s digit\\nsr_data[19] \\u003d (r0 -\\u0026gt; address.addr[0] / 0x10) + 48 + ((r0 -\\u0026gt; address.addr[0] / 0x10) / 10 * 7); // MAC byte 6 10\\u0027s digit\\nsr_data[20] \\u003d (r0 -\\u0026gt; address.addr[0] \\u0026amp; 0xF) + 48 + ((r0 -\\u0026gt; address.addr[0] \\u0026amp; 0xF ) / 10 * 7); // MAC byte 6 1\\u0027s digit\\n\\n// set custom scan response data (i.e. the Device Name value)\\nble112.ble_cmd_gap_set_adv_data(1, 0x15, sr_data);\\nwhile (ble112.checkActivity(1000));\\n\\n// put module into discoverable/connectable mode (with user-defined advertisement data)\\nble112.ble_cmd_gap_set_mode(BGLIB_GAP_USER_DATA, BGLIB_GAP_UNDIRECTED_CONNECTABLE);\\nwhile (ble112.checkActivity(1000));\\n\\n// set state to ADVERTISING\\nble_state \\u003d BLE_STATE_ADVERTISING;\\n}\\n\\nvoid my_ble_evt_connection_status(const ble_msg_connection_status_evt_t *msg) {\\n#ifdef DEBUG\\nSerial.print(\\\"###\\\\tconnection_status: { \\\");\\nSerial.print(\\\"connection: \\\"); Serial.print(msg -\\u0026gt; connection, HEX);\\nSerial.print(\\\", flags: \\\"); Serial.print(msg -\\u0026gt; flags, HEX);\\nSerial.print(\\\", address: \\\");\\n// this is a \\\"bd_addr\\\" data type, which is a 6-byte uint8_t array\\nfor (uint8_t i \\u003d 0; i \\u0026lt; 6; i++) {\\nif (msg -\\u0026gt; address.addr[i] \\u0026lt; 16) Serial.write(\\u00270\\u0027);\\nSerial.print(msg -\\u0026gt; address.addr[i], HEX);\\n}\\nSerial.print(\\\", address_type: \\\"); Serial.print(msg -\\u0026gt; address_type, HEX);\\nSerial.print(\\\", conn_interval: \\\"); Serial.print(msg -\\u0026gt; conn_interval, HEX);\\nSerial.print(\\\", timeout: \\\"); Serial.print(msg -\\u0026gt; timeout, HEX);\\nSerial.print(\\\", latency: \\\"); Serial.print(msg -\\u0026gt; latency, HEX);\\nSerial.print(\\\", bonding: \\\"); Serial.print(msg -\\u0026gt; bonding, HEX);\\nSerial.println(\\\" }\\\");\\n#endif\\n\\n// \\\"flags\\\" bit description:\\n// - bit 0: connection_connected\\n// Indicates the connection exists to a remote device.\\n// - bit 1: connection_encrypted\\n// Indicates the connection is encrypted.\\n// - bit 2: connection_completed\\n// Indicates that a new connection has been created.\\n// - bit 3; connection_parameters_change\\n// Indicates that connection parameters have changed, and is set\\n// when parameters change due to a link layer operation.\\n\\n// check for new connection established\\nif ((msg -\\u0026gt; flags \\u0026amp; 0x05) \\u003d\\u003d 0x05) {\\n// track state change based on last known state, since we can connect two ways\\nif (ble_state \\u003d\\u003d BLE_STATE_ADVERTISING) {\\nble_state \\u003d BLE_STATE_CONNECTED_SLAVE;\\n} else {\\nble_state \\u003d BLE_STATE_CONNECTED_MASTER;\\n}\\n}\\n\\n// update \\\"encrypted\\\" status\\nble_encrypted \\u003d msg -\\u0026gt; flags \\u0026amp; 0x02;\\n\\n// update \\\"bonded\\\" status\\nble_bonding \\u003d msg -\\u0026gt; bonding;\\n}\\n\\nvoid my_ble_evt_connection_disconnect(const struct ble_msg_connection_disconnected_evt_t *msg) {\\n#ifdef DEBUG\\nSerial.print(\\\"###\\\\tconnection_disconnect: { \\\");\\nSerial.print(\\\"connection: \\\"); Serial.print(msg -\\u0026gt; connection, HEX);\\nSerial.print(\\\", reason: \\\"); Serial.print(msg -\\u0026gt; reason, HEX);\\nSerial.println(\\\" }\\\");\\n#endif\\n\\n// set state to DISCONNECTED\\n//ble_state \\u003d BLE_STATE_DISCONNECTED;\\n// ^^^ skip above since we\\u0027re going right back into advertising below\\n\\n// after disconnection, resume advertising as discoverable/connectable\\n//ble112.ble_cmd_gap_set_mode(BGLIB_GAP_GENERAL_DISCOVERABLE, BGLIB_GAP_UNDIRECTED_CONNECTABLE);\\n//while (ble112.checkActivity(1000));\\n\\n// after disconnection, resume advertising as discoverable/connectable (with user-defined advertisement data)\\nble112.ble_cmd_gap_set_mode(BGLIB_GAP_USER_DATA, BGLIB_GAP_UNDIRECTED_CONNECTABLE);\\nwhile (ble112.checkActivity(1000));\\n\\n// set state to ADVERTISING\\nble_state \\u003d BLE_STATE_ADVERTISING;\\n\\n// clear \\\"encrypted\\\" and \\\"bonding\\\" info\\nble_encrypted \\u003d 0;\\nble_bonding \\u003d 0xFF;\\n}\\n\\nvoid my_ble_evt_attributes_value(const struct ble_msg_attributes_value_evt_t *msg) {\\n#ifdef DEBUG\\nSerial.print(\\\"###\\\\tattributes_value: { \\\");\\nSerial.print(\\\"connection: \\\"); Serial.print(msg -\\u0026gt; connection, HEX);\\nSerial.print(\\\", reason: \\\"); Serial.print(msg -\\u0026gt; reason, HEX);\\nSerial.print(\\\", handle: \\\"); Serial.print(msg -\\u0026gt; handle, HEX);\\nSerial.print(\\\", offset: \\\"); Serial.print(msg -\\u0026gt; offset, HEX);\\nSerial.print(\\\", value_len: \\\"); Serial.print(msg -\\u0026gt; value.len, HEX);\\nSerial.print(\\\", value_data: \\\");\\n// this is a \\\"uint8array\\\" data type, which is a length byte and a uint8_t* pointer\\nfor (uint8_t i \\u003d 0; i \\u0026lt; msg -\\u0026gt; value.len; i++) {\\nif (msg -\\u0026gt; value.data[i] \\u0026lt; 16) Serial.write(\\u00270\\u0027);\\nSerial.print(msg -\\u0026gt; value.data[i], HEX);\\n}\\nSerial.println(\\\" }\\\");\\n#endif\\n\\n// check for data written to \\\"c_rx_data\\\" handle\\nif (msg -\\u0026gt; handle \\u003d\\u003d GATT_HANDLE_C_RX_DATA \\u0026amp;\\u0026amp; msg -\\u0026gt; value.len \\u0026gt; 0) {\\n// set ping 8, 9, and 10 to three lower-most bits of first byte of RX data\\n// (nice for controlling RGB LED or something)\\ndigitalWrite(8, msg -\\u0026gt; value.data[0] \\u0026amp; 0x01);\\ndigitalWrite(9, msg -\\u0026gt; value.data[0] \\u0026amp; 0x02);\\ndigitalWrite(10, msg -\\u0026gt; value.data[0] \\u0026amp; 0x04);\\n}\\n}\\nvoid my_ble_evt_attclient_indicated(const struct ble_msg_attclient_indicated_evt_t *msg) {\\n#ifdef DEBUG\\nSerial.print(\\\"###\\\\tattclient_indicate: { \\\");\\nSerial.print(\\\"Indication received.\\\");\\nSerial.println(\\\" }\\\");\\n#endif\\n}\\n\\nvoid my_ble_evt_attributes_status (const struct ble_msg_attributes_status_evt_t *msg) {\\n#ifdef DEBUG\\nSerial.print(\\\"###\\\\tattributes_status: { \\\");\\nSerial.print(\\\"nSubscription changed\\\");\\nSerial.print(\\\", flags: \\\"); Serial.print(msg -\\u0026gt; flags, HEX);\\n\\nSerial.println(\\\" }\\\");\\n#endif\\n\\nif (msg -\\u0026gt; flags \\u003d\\u003d 1) {\\nnotifier \\u003d true;\\n}\\nelse {\\nnotifier \\u003d false;\\n}\\n}\\u003c/blockquote\\u003e\\nI\\u0027ll like to highlight a couple of things. In this debug sketch, the unsigned integer array (Uint_*t) has a size of six, although I only set 3 values. This is because in my actual project I needed to carry 4 values, where the 4th value was a double that had 3 decimal places. To carry it I wrote a function that returned the nth digit of the number, split it up into 3 integers and sent them in array positions 4, 5 and 6. The C function is shown below for your edification:\\n\\u003cblockquote\\u003elong getNthDigit(long number, int base, int n) {\\nlong answer \\u003d 0;\\nanswer \\u003d (long) (number / pow(base, n - 1));\\nanswer \\u003d answer % base;\\nreturn answer;\\n}\\u003c/blockquote\\u003e\\nTo put the numbers back together after getting the nth digit simply involved multiplying the first number by 10 and then adding the unit digit to it to concatenate them. To modify the values of an array in C, you use pointers and point it as a reference. Code below:\\n\\u003cblockquote\\u003evoid changeVal(long val, uint8_t *values) {\\nvalues[3] \\u003d ((getNthDigit(val, 10, 6) * 10) + getNthDigit(val, 10, 5));\\nvalues[4] \\u003d ((getNthDigit(val, 10, 4) * 10) + getNthDigit(val, 10, 3));\\nvalues[5] \\u003d ((getNthDigit(val, 10, 2) * 10) + getNthDigit(val, 10, 1));\\n}\\u003c/blockquote\\u003e\\nNOTE: if the first term in the long integers you\\u0027re trying to concatenate is zero, the final value passed to to the array won\\u0027t be accurate. Say for example you pass the value 670409, get the nth integer and pass them into the array function. You won\\u0027t get \\\"67, \\\"04\\\" and \\\"09\\\", but rather \\\"67, \\\"4\\\" and \\\"9\\\". It is extremely important that your client be able to recognize this and pad the needed zero when the value is received as needed. The Android app I wrote does this and I will be sharing that later as well.\\n\\nThere you go! You have the code for your own Arduino controlled GATT Server!",
            "tags": [
                "Android",
                "Arduino",
                "BLE112",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": "Technology"
        },
        {
            "title": "A GATT Client",
            "stringDate": "09-07-2014 01:19:02",
            "dc:creator": "tjdah10",
            "body": "We\\u0027ve so far written a GATT server, now let\\u0027s move on to the client.\\n\\n\\u003c!--more--\\u003e\\n\\nThe GATT Client we will be writing is going to be an Android App on an Android phone running Android 4.3 or higher as this is when Google added BLE to Android. The following is a great example provided on the Android developer\\u0027s website \\u003ca href\\u003d\\\"http://developer.android.com/guide/topics/connectivity/bluetooth-le.html\\\"\\u003ehere\\u003c/a\\u003e. Be sure to download the source code from that URL so you can import it into your project and test the server you wrote prior.\\n\\nThe source code was built using Android Studio, so if you prefer Eclipse, you won\\u0027t be able to import it directly. Rather you should create a new Android project in eclipse, create the classes in the \\\"src\\\" folder on the project downloaded from the developer website, and copy and pate the code into the classes in your project. You will also need to copy the manifest file, as well as all the XML files in the layout, and res folders.\\n\\nBe sure to review the developer\\u0027s guide linked above thoroughly, as it explains Android\\u0027s BLE API extremely well. The next few posts regarding BLE will discuss how to make sure the BLE connection doesn\\u0027t break when your phone\\u0027s screen is off, i.e. creating a background process to continuously collect data. I will also show how to export that data to a text file for later analysis and review.",
            "tags": [
                "Android",
                "BLE112",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": "Technology"
        },
        {
            "title": "Learning Photoshop",
            "stringDate": "09-07-2014 01:42:50",
            "dc:creator": "tjdah10",
            "body": "I tried a bunch of new things this past summer: building both the front and backend for my website, an Android app and even learning photoshop a bit.\\n\\nBelow are my favorite shopped images.\\n\\n[caption id\\u003d\\\"attachment_29\\\" align\\u003d\\\"alignnone\\\" width\\u003d\\\"300\\\"]\\u003ca href\\u003d\\\"https://tunjid.files.wordpress.com/2014/09/2014-2105-season-header.png\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-29\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/2014-2105-season-header.png?w\\u003d300\\\" alt\\u003d\\\"Twitter header. Created shortly after winning the community shield.\\\" width\\u003d\\\"300\\\" height\\u003d\\\"100\\\" /\\u003e\\u003c/a\\u003e Twitter header. Created shortly after winning the community shield.[/caption]\\n\\n\\u003c!--more--\\u003e\\n\\n[caption id\\u003d\\\"attachment_31\\\" align\\u003d\\\"alignnone\\\" width\\u003d\\\"300\\\"]\\u003ca href\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/tjbusinescard.png\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-31\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/tjbusinescard.png?w\\u003d300\\\" alt\\u003d\\\"Business card attempt: Front\\\" width\\u003d\\\"300\\\" height\\u003d\\\"201\\\" /\\u003e\\u003c/a\\u003e Business card attempt: Front[/caption]\\n\\n[caption id\\u003d\\\"attachment_32\\\" align\\u003d\\\"alignnone\\\" width\\u003d\\\"300\\\"]\\u003ca href\\u003d\\\"https://tunjid.files.wordpress.com/2014/09/tjbusinesscardback.png\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-32\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/tjbusinesscardback.png?w\\u003d300\\\" alt\\u003d\\\"Business card attempt: Back\\\" width\\u003d\\\"300\\\" height\\u003d\\\"201\\\" /\\u003e\\u003c/a\\u003e Business card attempt: Back[/caption]\\n\\n\\u0026nbsp;\\n\\n\\u0026nbsp;",
            "category": "Design",
            "tags": [
                "Design",
                "Photoshop"
            ]
        },
        {
            "title": "Longterm Android BLE Connections",
            "stringDate": "09-08-2014 10:38:26",
            "dc:creator": "tjdah10",
            "body": "Before going through this, you should have gone over this \\u003ca href\\u003d\\\"http://tunjid.wordpress.com/2014/09/07/a-gatt-client/\\\"\\u003epost\\u003c/a\\u003e. Assuming you\\u0027ve done that the following terms should be familiar to you:\\n\\u003col\\u003e\\n\\t\\u003cli\\u003eA started Android service\\u003c/li\\u003e\\n\\t\\u003cli\\u003eA bound Android service\\u003c/li\\u003e\\n\\u003c/ol\\u003e\\n\\u003c!--more--\\u003e\\n\\nTo review, a bound service is one that returns an \\\"ibinder\\\" for an Android component to attach to. This component can be an Activity, a Fragment, or even another service. The BluetoothLeService used in the demo provided on the developer\\u0027s website is this sort of service, therefore, the connection is only active as long as there is a component bound to it, in this case, it\\u0027s the \\\"DeviceControlActivity\\\" class. Now, once yo press home on your Android device or turn off the screen, the onStop method is called on the DeviceControlActivity class, indicating that the activity may be destroyed at the Android system\\u0027s discretion. Once this activity is destroyed, the BluetoothLeService becomes unbound, which in turn can be destroyed anytime at the system\\u0027s discretion. The system\\u0027s \\\"discretion\\\" is discussed in greater detail \\u003ca href\\u003d\\\"http://developer.android.com/guide/components/services.html\\\"\\u003ehere\\u003c/a\\u003e.\\n\\nTherefore, the key to keeping the BLE service running in the background, is to start a service that is independent of whether or not system components are bound to it, and subsequently bind activities or other services to it if you please. This is done by calling startService(intent) where the intent points to the class of the service you\\u0027re trying to call. Mine is aptly called \\\"ServiceBinder\\\".\\n\\nIn my DeviceControl activity, I have a switch that enables and disables notifications. When notifications are enabled, I want to automatically start the service that will bind to the BluetoothLeService and keep it running. The code for that though is for another post. Below is the code for my enable notifications switch. Note that I also set the service to the foreground and create a pending intent for another activity called \\\"LongTerm\\\" to latch on to so I can see real time data whenever I want.\\n\\u003cblockquote\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003epublic\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003evoid\\u003c/span\\u003e enableNotifications\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eView\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s5\\\"\\u003eview\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s3\\\"\\u003e{\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p3\\\"\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eSwitch\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s6\\\"\\u003eenableNotifications\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eSwitch\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s8\\\"\\u003efindViewById\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eR\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eid\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003eenable_notifications\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p4\\\"\\u003eenableNotifications\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003esetVisibility\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eView\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003eVISIBLE\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p5\\\"\\u003e// Turn off notifications.\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p4\\\"\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003eif\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eenableNotifications\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003eisChecked\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e()\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003efalse\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s3\\\"\\u003e{\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p6\\\"\\u003eIntent \\u003cspan class\\u003d\\\"s6\\\"\\u003eintent\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s9\\\"\\u003eIntent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003ethis\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e ServiceBinder\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003eclass\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p7\\\"\\u003estopService\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003eintent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p6\\\"\\u003eRelativeLayout\\u003cspan class\\u003d\\\"s6\\\"\\u003ebuttons\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eRelativeLayout\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s8\\\"\\u003efindViewById\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eR\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003eid\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003ebuttons\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p8\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003ebuttons\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003esetVisibility\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eView\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003eVISIBLE\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p9\\\"\\u003emBluetoothLeService\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003eremoveCharacteristicNotification\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003emNotifyCharacteristic\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003efalse\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p9\\\"\\u003emBluetoothLeService\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003estopForeground\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003etrue\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p10\\\"\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e}\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p5\\\"\\u003e// Turn on notifications.\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p11\\\"\\u003eelse\\u003cspan class\\u003d\\\"s3\\\"\\u003e{\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p5\\\"\\u003eIntent \\u003cspan class\\u003d\\\"s6\\\"\\u003eintent\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s9\\\"\\u003eIntent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003ethis\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e ServiceBinder\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003eclass\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p3\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003eintent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003eputExtra\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eEXTRA_DEVICE_ADDRESS_BINDER\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s12\\\"\\u003emDeviceAddress\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p3\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003eintent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003eputExtra\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eEXTRA_DEVICE_NAME_BINDER\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s12\\\"\\u003emDeviceName\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p7\\\"\\u003estartService\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003eintent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p3\\\"\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eNotification\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s6\\\"\\u003enotification\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s13\\\"\\u003eNotification\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eR\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003edrawable\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003emime_notification_icon\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s8\\\"\\u003egetText\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eR\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003estring\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003esampling_data\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eSystem\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s14\\\"\\u003ecurrentTimeMillis\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e())\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p12\\\"\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eIntent\\u003c/span\\u003e notificationIntent \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s9\\\"\\u003eIntent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003ethis\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s4\\\"\\u003eLongTerm\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003eclass\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p3\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003enotificationIntent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003eputExtra\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eEXTRA_DEVICE_ADDRESS_BINDER\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s12\\\"\\u003emDeviceAddress\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p3\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003enotificationIntent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003eputExtra\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eEXTRA_DEVICE_NAME_BINDER\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s12\\\"\\u003emDeviceName\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p6\\\"\\u003ePendingIntent\\u003cspan class\\u003d\\\"s6\\\"\\u003ependingIntent\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e PendingIntent\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s14\\\"\\u003egetActivity\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003ethis\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s15\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s11\\\"\\u003enotificationIntent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e PendingIntent\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003eFLAG_CANCEL_CURRENT\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p13\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003enotification\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s13\\\"\\u003esetLatestEventInfo\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003ethis\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e\\\"Mime is sampling data\\\"\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e\\\"Service connected\\\"\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s11\\\"\\u003ependingIntent\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p9\\\"\\u003emBluetoothLeService\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003estartForeground\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eONGOING_NOTIFICATION_ID\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s11\\\"\\u003enotification\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p10\\\"\\u003ecom\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003eandroidplot\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003exy\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eXYPlot\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s6\\\"\\u003edata\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003ecom\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003eandroidplot\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003exy\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eXYPlot\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s8\\\"\\u003efindViewById\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eR\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eid\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003ebioimpedancePlot\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p8\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003edata\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003esetVisibility\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eView\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003eVISIBLE\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p6\\\"\\u003eRelativeLayout\\u003cspan class\\u003d\\\"s6\\\"\\u003ebuttons\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eRelativeLayout\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s8\\\"\\u003efindViewById\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eR\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003eid\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003ebuttons\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p8\\\"\\u003e\\u003cspan class\\u003d\\\"s11\\\"\\u003ebuttons\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003esetVisibility\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eView\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s10\\\"\\u003eVISIBLE\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p9\\\"\\u003emBluetoothLeService\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s9\\\"\\u003esetCharacteristicNotification\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003emNotifyCharacteristic\\u003cspan class\\u003d\\\"s7\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s1\\\"\\u003etrue\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e;\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p10\\\"\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e}\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p10\\\"\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e}\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p10\\\"\\u003e\\u003c/p\\u003e\\n\\u003c/blockquote\\u003e\\n\\u003cp class\\u003d\\\"p10\\\"\\u003eIf you use this code exactly, your IDE will most likely tell you the method used for the Notifications is deprecated. This is deliberate. Android 4.4.3 - 4.4.4 on the Nexus 5 and the Moto X (my device), the Notification builder has a bug that ruins the pendingIntent when the notification is clicked, it doesn\\u0027t work. Reverting to the deprecated method fixes the issue for me, so till that bug is fixed, I\\u0027m sticking with the deprecated method. Details on the bug can be found \\u003ca href\\u003d\\\"https://code.google.com/p/android/issues/detail?id\\u003d61850\\\"\\u003ehere\\u003c/a\\u003e. Also, com\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003eandroidplot\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003exy\\u003cspan class\\u003d\\\"s7\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003eXYPlot is not a native Android library, so \\\"CMD + O\\\" on a Mac (CTRL + O on Windows) won\\u0027t import it. You can find the library and documentation on how to use it \\u003ca href\\u003d\\\"http://androidplot.com/\\\"\\u003ehere\\u003c/a\\u003e.\\u003c/span\\u003e\\u003c/p\\u003e",
            "tags": [
                "Android",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": "Technology"
        },
        {
            "title": "A little pressure, a little dye, a little caulk, and lots of time.",
            "stringDate": "09-09-2014 08:20:16",
            "dc:creator": "tjdah10",
            "body": "CNC machines and 3D printers are lovely things and the amount of precision linear encoders and stepper motors have today is phenomenal.\\n\\nWith a few simplifying assumptions, a simple experiment, the things listed in the title, and a nice little Java Gcode generator I wrote, I created the quarter pyramids shown below.\\n\\nTo give you a sense of scale, each layer of both pyramids is only 0.41 mm tall. The bigger pyramid is spaced at 0.8 mm and the smaller pyramid at 0.41 mm and weren\\u0027t built using an actual 3D printer. They both have a full height of about 18 mm.\\n\\n[caption id\\u003d\\\"attachment_38\\\" align\\u003d\\\"alignleft\\\" width\\u003d\\\"165\\\" class\\u003d\\\" \\\"]\\u003ca href\\u003d\\\"https://tunjid.files.wordpress.com/2014/09/img_20140909_080332321.jpg\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-38\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080332321.jpg?w\\u003d165\\\" alt\\u003d\\\"Large Pyramid: Higher Elevation; Front\\\" width\\u003d\\\"165\\\" height\\u003d\\\"300\\\" /\\u003e\\u003c/a\\u003e Large Pyramid: Higher Elevation; Front[/caption]\\n\\n[caption id\\u003d\\\"attachment_39\\\" align\\u003d\\\"alignleft\\\" width\\u003d\\\"165\\\" class\\u003d\\\"       \\\"]\\u003ca href\\u003d\\\"https://tunjid.files.wordpress.com/2014/09/img_20140909_080424276.jpg\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-39\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080424276.jpg?w\\u003d165\\\" alt\\u003d\\\"Large Pyramid: Higher Elevation; Back\\\" width\\u003d\\\"165\\\" height\\u003d\\\"300\\\" /\\u003e\\u003c/a\\u003e Large Pyramid: Higher Elevation; Back[/caption]\\n\\n[caption id\\u003d\\\"attachment_42\\\" align\\u003d\\\"alignleft\\\" width\\u003d\\\"165\\\" class\\u003d\\\"     \\\"]\\u003ca href\\u003d\\\"https://tunjid.files.wordpress.com/2014/09/img_20140909_080315325.jpg\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-42\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080315325.jpg?w\\u003d165\\\" alt\\u003d\\\"Large Pyramid: Side View\\\" width\\u003d\\\"165\\\" height\\u003d\\\"300\\\" /\\u003e\\u003c/a\\u003e Large Pyramid: Side View[/caption]\\n\\n\\u003c!--more--\\u003e\\n\\n\\n[caption id\\u003d\\\"attachment_41\\\" align\\u003d\\\"alignleft\\\" width\\u003d\\\"165\\\" class\\u003d\\\" \\\"]\\u003ca href\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080505856.jpg\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-41\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080505856.jpg?w\\u003d165\\\" alt\\u003d\\\"Small Pyramid: High Elevation; Front\\\" width\\u003d\\\"165\\\" height\\u003d\\\"300\\\" /\\u003e\\u003c/a\\u003e Small Pyramid: High Elevation; Front[/caption]\\n\\n[caption id\\u003d\\\"attachment_40\\\" align\\u003d\\\"alignleft\\\" width\\u003d\\\"165\\\" class\\u003d\\\"     \\\"]\\u003ca href\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080519722.jpg\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-40\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080519722.jpg?w\\u003d165\\\" alt\\u003d\\\"Small Pyramid: High Elevation; Side\\\" width\\u003d\\\"165\\\" height\\u003d\\\"300\\\" /\\u003e\\u003c/a\\u003e Small Pyramid: High Elevation; Side[/caption]\\n\\n[caption id\\u003d\\\"attachment_37\\\" align\\u003d\\\"alignleft\\\" width\\u003d\\\"165\\\" class\\u003d\\\"     \\\"]\\u003ca href\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080440434.jpg\\\"\\u003e\\u003cimg class\\u003d\\\"size-medium wp-image-37\\\" src\\u003d\\\"http://tunjid.files.wordpress.com/2014/09/img_20140909_080440434.jpg?w\\u003d165\\\" alt\\u003d\\\"Small Pyramid  \\u0026amp; Failed Attempts\\\" width\\u003d\\\"165\\\" height\\u003d\\\"300\\\" /\\u003e\\u003c/a\\u003e Small Pyramid \\u0026amp; Failed Attempts[/caption]",
            "tags": [
                "3D Printing",
                "Additive Manufacturing"
            ],
            "category": "Technology"
        },
        {
            "title": "Bioimpedance and The Future",
            "stringDate": "09-23-2014 01:02:29",
            "dc:creator": "tjdah10",
            "body": "Wearables are here. Well, they\\u0027ve been for a bit, but with Apple entering the space, the general public will be more accustomed and accepting of the idea of wearing electronics everyday to augment our everyday.\\n\\u003c!--more--\\u003e\\n\\nI own a Moto 360, and while the pedometer is neat, It\\u0027s not quite a must have the way my smartphone is. The same goes for the heart rate monitor. What would be really cool, is if Apple\\u0027s HealthKit and Google Fit had access to biometrics with ridiculously smart algorithms that gave more than a snapshot or snippet of a person\\u0027s medical history. Something that offered a lot more; data that remains fairly static over short periods, but can show changes over certain lengths of time. I\\u0027m talking months and years, the kind of time that elapses when someone starts to gain a few pounds, or even more. Something that lets freshmen know they\\u0027re gaining way more than the freshman 15. For recovering anorexics, something that gave them a pat on the back every few weeks for every pound or so gained.\\n\\nEnter \\u003ca href\\u003d\\\"http://en.wikipedia.org/wiki/Bioelectrical_impedance_analysis\\\"\\u003ebioimpedance\\u003c/a\\u003e. A few choice excerpts from \\u003ca href\\u003d\\\"http://www.impedimed.com/medical-applications/fluid-status-body-composition/\\\"\\u003eImpediMed\\u003c/a\\u003e about the capabilities and potential of bioimpedance include:\\n\\u003cblockquote\\u003e\\n\\u003ch3 class\\u003d\\\"sub\\\"\\u003eBioimpedance Methods: Bioimpedance Spectroscopy the Way of the Future\\u003c/h3\\u003e\\nThe various types of bioimpedance include, single frequency BIA (SF-BIA), multiple frequency BIA (MF-BIA) and the latest advancement offered by ImpediMed, bioimpedance spectroscopy (BIS).\\n\\n\\u003cstrong\\u003eSingle Frequency BIA (SF-BIA)\\u003c/strong\\u003e\\n\\nSF-BIA is generally performed at a frequency of 50 kHz. At this frequency the current passes through both the intracellular and extracellular fluid and consequently total body water (TBW) may be calculated. However, as the current passes through both intra and extracellular compartments, differences in intracellular fluid alone are unable to be determined \\u003csup\\u003e2\\u003c/sup\\u003e.\\n\\nSF-BIA relies on prediction equations and algorithms to calculate results \\u003csup\\u003e2\\u003c/sup\\u003e. These algorithms have in general been determined from healthy subjects. The one algorithm is not suitable for all subjects. To be accurate devices will offer a choice of three on-board algorithms (General, Child and Obese) therefore improving the accuracy of measurement at 50 kHz.\\n\\n\\u003cstrong\\u003eMultiple Frequency BIA (MF-BIA)\\u003c/strong\\u003e\\n\\nMF-BIA involves taking impedance measurements at less than seven frequencies. These limited frequency devices employ empirical linear regression models to estimate subject results.\\n\\n\\u003cstrong\\u003eBioimpedance Spectroscopy (BIS)\\u003c/strong\\u003e\\n\\nBIS takes measurements at 256 different frequencies and uses mathematical modeling to calculate the resistance at zero and infinite frequencies (R0 and Rinf respectively). These values are utilized through Hanai mixture theory to derive fat-free mass and fat mass. The determination of impedance at zero frequency is highly significant as this value represents the impedance of the ECF alone while establishing Rinf allows reliable prediction of the TBW \\u003csup\\u003e3\\u003c/sup\\u003e.\\u003c/blockquote\\u003e\\nWhat happens when by coincidence someone (me) who\\u0027s toying around with the prospects of bluetooth low energy happens to share lab space with an innovative Biomedical Engineering PhD. student (\\u003ca href\\u003d\\\"http://www.barrybelmont.com/\\\"\\u003eBarry\\u003c/a\\u003e) and a brilliant Masters electrical engineering student (\\u003ca href\\u003d\\\"www.linkedin.com/in/itkwon/en\\\"\\u003eIl Taek\\u003c/a\\u003e)?\\n\\nPretty damn cool things.\\n\\nTogether, we\\u0027ve built a system using completely open source hardware that is capable of measuring human bioimpedance, recording that data and interpreting it. I mostly was involved in setting up communications using the BLE stack, Il Taek wrote the Arduino library for the  hardware - software interface for the chip that actually measures the impedance, and Barry was the brilliant guy who steered us along and introduced us to the lovely non-invasive technique that is bioimpedance.\\n\\nIt gets better. We\\u0027re going to make the device wearable. That means most likely one of the first experiments to measure bioimpedance data for more than 2 consecutive hours (no paper has been published on long term bioimpedance measurements as of yet). I\\u0027m excited, mostly because I get to design the hardware that the wearable will be housed in, most likely 3D printed - ABS or silicone based.\\n\\nGood times.",
            "tags": [
                "3D Printing",
                "BLE112",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": [
                "Design",
                "Technology"
            ]
        },
        {
            "title": "Progressive Cavity Pumps",
            "stringDate": "09-28-2014 02:34:51",
            "dc:creator": "tjdah10",
            "body": "In my research recently, I\\u0027ve needed to move a very viscous fluid at a near constant flowrate. This led me to read about many different pumps and their various applications. Out of them all, my favorite happens to be the progressive cavity pump.\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"180\\\"]\\u003ca href\\u003d\\\"http://upload.wikimedia.org/wikipedia/commons/c/c8/Pcp-thumb.gif\\\"\\u003e\\u003cimg class\\u003d\\\"\\\" src\\u003d\\\"http://upload.wikimedia.org/wikipedia/commons/c/c8/Pcp-thumb.gif\\\" alt\\u003d\\\"\\\" width\\u003d\\\"180\\\" height\\u003d\\\"101\\\" /\\u003e\\u003c/a\\u003e Progressive Cavity Pump[/caption]\\n\\n\\u003c!--more--\\u003e\\n\\nI think what I find most interesting about it is how simple, yet complex it is. In the simple case shown above, it is a helical screw (rotor) that is embedded in a helical cavity (stator)  with a pitch twice that of the rotor. When the rotor rotates the motion of the shaft is in the shape of a hypocycloid. In this case where the rotor is a single helix and the stator is a double helix, the hypocycloid happens to be a straight line.\\n\\nI 3D printed some for testing, and I\\u0027m happy to report that the PCP pumps peanut butter like a champ. If you\\u0027re interested in printing some for yourself, you can grab the STL and SolidWorks files at the link below.\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"144\\\"]\\u003cimg class\\u003d\\\"\\\" src\\u003d\\\"http://i.imgur.com/90fObf1.jpg\\\" alt\\u003d\\\"\\\" width\\u003d\\\"144\\\" height\\u003d\\\"237\\\" /\\u003e Assembled and disassembled pumps[/caption]\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"72\\\"]\\u003cimg class\\u003d\\\"\\\" src\\u003d\\\"http://i.imgur.com/HWZBeC0.jpg\\\" alt\\u003d\\\"\\\" width\\u003d\\\"72\\\" height\\u003d\\\"118\\\" /\\u003e Cross-section Of Used Pump[/caption]\\n\\n\\u003ca href\\u003d\\\"https://www.dropbox.com/sh/lbqg05cm09qcgr8/AAANSsHWl4UtsHXbhA4LJzKla?dl\\u003d0\\\"\\u003eFiles.\\u003c/a\\u003e",
            "tags": [
                "3D Printing",
                "Additive Manufacturing",
                "Fluid Mechanics",
                "Pumps"
            ],
            "category": "Technology"
        },
        {
            "title": "BLE Project Source Code",
            "stringDate": "10-01-2014 09:06:41",
            "dc:creator": "tjdah10",
            "body": "Source code for the BLE Project is on Github. Feel free to peruse it and use it as you like, with the exception of the app name and and icon.\\n\\n\\u003ca href\\u003d\\\"https://github.com/WuMRC/drive\\\"\\u003eSource\\u003c/a\\u003e.",
            "tags": [
                "Android",
                "Arduino",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": "Technology"
        },
        {
            "title": "Updating Gatt Structure on Android App after Change on Slave / Peripheral",
            "stringDate": "10-04-2014 07:23:08",
            "dc:creator": "tjdah10",
            "body": "If your Android app has paired with your device before, and you update the Gatt structure of your BLE Slave / Peripheral, you will need to clear the cache Android side, else the Android app will continue to show the old Gatt structure.\\n\\nTo clear the cache, all you need to do is toggle Bluetooth on and off. With this done, the cache should be clear and your new Gatt structure will be picked up when you scan and connect to your device again.",
            "tags": [
                "Android",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart"
            ],
            "category": "Technology"
        },
        {
            "title": "Downsides of software serial libraries",
            "stringDate": "10-12-2014 01:20:59",
            "dc:creator": "tjdah10",
            "body": "The default Arduino SoftwareSerial library proved to be non-tolerant with simple libraries when used for BLE communication, even more so with fairly complex libraries on top of that.\\n\\nWe switched to Paul Stoffregen\\u0027s AltSoftSerial library and things have been great... till now. From the documentation:\\n\\u003cblockquote\\u003eInterrupt Latency Requirements\\n\\nAltSoftSerial can withstand approximately 1 bit time of interrupt latency from other libraries or functions. Most libraries, HardwareSerial, and the millis() timekeeping interrupt are designed to minimize CPU time spend executing interrupts or accessing data with interrupts disabled.\\nHowever, some libraries may disable interrupts for longer than 1 bit time. If they do, AltSoftSerial will not work properly. If you discover erroneous results from AltSoftSerial, please try testing without other libraries.\\u003c/blockquote\\u003e\\nSoftwareSerial would break with relatively low complexity I2C communication using Arduino\\u0027s Wire library, it proved impossible to use with the AD5933 library for similar reasons.\\n\\nAltSoftSerial works very well in this regard, but as we begin to write multiple sampling rates and frequency sweeps that request timer interrupts and reset commands to the AD5933 more frequently, the time window for interrupts to be handled shrink considerably.\\n\\nWith the sketch BLE_Debug_Timer that just carries a psuedo sine signal, setting a sampling rate of 90 Hz is no issue. Z_BLE_3 however that has to measure and send impedance values, breaks at sampling rates over 80 Hz and completely garbles serial communication with AltSoftSerial library, you only need to look at Arduino\\u0027s serial monitor to see the gibberish it spouts and functions it calls that it really shouldn\\u0027t.\\n\\nWe therefore probably need to move to the Arduino Mega for development and use the multiple hardware serial port it provides for BLE communication.\\n\\nAll this of course is a working hypothesis, I will be testing my claims tomorrow in lab, but I\\u0027m fairly certain they\\u0027re right from past experience with SoftwareSerial and AltSoftSerial.\\n\\nOn we go again.",
            "tags": [
                "AltSoftSerial",
                "Arduino",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart",
                "Serial Library",
                "SoftwareSerial",
                "UART"
            ],
            "category": "Technology"
        },
        {
            "title": "Hypothesis confirmed: Software serial libraries are bad for complex sketches",
            "stringDate": "10-13-2014 11:27:30",
            "dc:creator": "tjdah10",
            "body": "Earlier today I tested the Z_BLE_3 sketch on an Arduino Mega using its hardware serial and the results were fantastic.\\n\\nIt just goes to show, you may have a pretty good software serial library, but it\\u0027s nowhere near as good as the real hardware serial.",
            "tags": [
                "AltSoftSerial",
                "Arduino",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart",
                "Serial Library",
                "SoftwareSerial",
                "UART"
            ],
            "category": "Technology"
        },
        {
            "title": "Creating custom timer interrupts for arduino",
            "stringDate": "10-23-2014 11:51:56",
            "dc:creator": "tjdah10",
            "body": "Arduino boards are awesome. Even more awesome is the fact that there\\u0027s so much documentation out there on using them.\\n\\nA very popular timer interrupt library for Arduino is \\u003ca href\\u003d\\\"https://www.google.com/webhp?sourceid\\u003dchrome-instant\\u0026amp;ion\\u003d1\\u0026amp;espv\\u003d2\\u0026amp;ie\\u003dUTF-8#q\\u003dmstimer2\\\"\\u003eMsTimer2\\u003c/a\\u003e, which has a resolution of 1 millisecond. If your project requires more resolution however, you\\u0027re a bit out of luck. Fortunately, it\\u0027s rather easy to increase the resolution of the timer library with a few modifications.\\n\\n\\u003c!--more--\\u003e\\n\\n\\nI stumbled across this \\u003ca href\\u003d\\\"http://popdevelop.com/2010/04/mastering-timer-interrupts-on-the-arduino/\\\"\\u003eblog post\\u003c/a\\u003e from 2010 where the author had already gone over the task of reading the datasheet for Amtel\\u0027s ATMEGA*** series of microcontrollers, and understanding the way the timer registers work. This particular post is concerned with timer2. Of interest is this part of the documentation:\\n\\u003cblockquote\\u003e\\n\\u003cdiv id\\u003d\\\"crayon-54450afb4872a060953121-40\\\" class\\u003d\\\"crayon-line\\\"\\u003e\\u003cspan class\\u003d\\\"crayon-h\\\"\\u003e \\u003c/span\\u003e\\u003cspan class\\u003d\\\"crayon-c\\\"\\u003e/* We need to calculate a proper value to load the timer counter.\\u003c/span\\u003e\\u003c/div\\u003e\\n\\u003cdiv id\\u003d\\\"crayon-54450afb4872a060953121-41\\\" class\\u003d\\\"crayon-line\\\"\\u003e\\u003cspan class\\u003d\\\"crayon-c\\\"\\u003e   * The following loads the value 131 into the Timer 2 counter register\\u003c/span\\u003e\\u003c/div\\u003e\\n\\u003cdiv id\\u003d\\\"crayon-54450afb4872a060953121-42\\\" class\\u003d\\\"crayon-line\\\"\\u003e\\u003cspan class\\u003d\\\"crayon-c\\\"\\u003e   * The math behind this is:\\u003c/span\\u003e\\u003c/div\\u003e\\n\\u003cdiv id\\u003d\\\"crayon-54450afb4872a060953121-43\\\" class\\u003d\\\"crayon-line\\\"\\u003e\\u003cspan class\\u003d\\\"crayon-c\\\"\\u003e   * (CPU frequency) / (prescaler value) \\u003d 125000 Hz \\u003d 8us.\\u003c/span\\u003e\\u003c/div\\u003e\\n\\u003cdiv id\\u003d\\\"crayon-54450afb4872a060953121-44\\\" class\\u003d\\\"crayon-line\\\"\\u003e\\u003cspan class\\u003d\\\"crayon-c\\\"\\u003e   * (desired period) / 8us \\u003d 125.\\u003c/span\\u003e\\u003c/div\\u003e\\n\\u003cdiv id\\u003d\\\"crayon-54450afb4872a060953121-45\\\" class\\u003d\\\"crayon-line\\\"\\u003e\\u003cspan class\\u003d\\\"crayon-c\\\"\\u003e   * MAX(uint8) + 1 - 125 \\u003d 131;\\u003c/span\\u003e\\u003c/div\\u003e\\n\\u003cdiv id\\u003d\\\"crayon-54450afb4872a060953121-46\\\" class\\u003d\\\"crayon-line\\\"\\u003e\\u003cspan class\\u003d\\\"crayon-c\\\"\\u003e   */\\u003c/span\\u003e\\u003c/div\\u003e\\u003c/blockquote\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003eIndeed, the method above and the sketch included in the blog post are exactly what was used to build MsTimer2. Using the knowledge therein, I modified it slightly to create my own timer library with a resolution of 40 microseconds. Following the logic above, for a period of 40 microseconds and a prescaler value of 128 (My board runs at 16MHz), I have:\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e40 / 8 \\u003d 5.\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003eTherefore, the value to be loaded into the timer 2 register is  MAX(uint8) - 5 \\u003d 256 - 25 \\u003d 251.\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003eThen, in the library\\u0027s overflow function, you increase some variable (count in this case) by the period: 40 microseconds.\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003eNOTE: These modifications now mean you have to pass the period into the library in microseconds, and not milliseconds. The full modified library can be found on Github at the following link:\\u003c/div\\u003e\\n\\u0026nbsp;\\n\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003ca href\\u003d\\\"https://github.com/WuMRC/drive/blob/master/Micro40Timer/Micro40Timer.cpp\\\"\\u003eLink\\u003c/a\\u003e.\\u003c/div\\u003e\\n\\u0026nbsp;\\n\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003eThe library is also fairly robust so it works on a plethora of Arduino boards. Peruse the .cpp file to see if your board is supported. If it isn\\u0027t simply add an if statement and include your board, or take out the statements and put in the appropriate prescaler value.\\u003c/div\\u003e\\n\\u0026nbsp;\\n\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003eEnjoy.\\u003c/div\\u003e\\n\\u003cdiv class\\u003d\\\"crayon-line\\\"\\u003e\\u003c/div\\u003e",
            "tags": "Arduino",
            "category": "Technology"
        },
        {
            "title": "Extracting Bio-impedance Parameters from Measured Data",
            "stringDate": "01-16-2015 09:01:53",
            "dc:creator": "tjdah10",
            "body": "First post of the new year! I figured, I\\u0027d start with something interesting.\\n\\nOver winter break, I went home to the lovely warmth of West Africa, and had an epiphany of sorts as to how to extract the resistive values for intracellular water (ICW), extracellular water (ECW) and the capacitive value for the cell membrane after performing a frequency sweep on biological tissue (or model circuit) of interest.\\n\\n\\u003c!--more--\\u003e\\n\\nUpon implementation of my idea, I had very good results. Using Android\\u0027s AsyncTask, I\\u0027m also able to display the results and plot a resistance - reactance curve of the data near instantaneously. I typically perform a frequency sweep from 2 KHz to 100 KHz, at a step size of 1 KHz where the frequency is incremented at a rathe of 50 Hz. In other words, it takes me 2 seconds to fully characterize the sample I\\u0027m working with. If I increase the sampling rate to 90 Hz, that cuts down the time to just under a second. It\\u0027s fantastic.\\n\\nNow the algorithm I\\u0027ve modified, and implemented to get these results is something I will keep closely to my chest for the time being, because I think it\\u0027s fairly cool, and one doesn\\u0027t need to do post analysis in MATLAB as is often the case as I also generate the root mean square error and an R-squared value to go along with the plotted data. The screenshots below are of the app\\u0027s interface, detailing raw data, and post-analysis plots.\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"434\\\"]\\u003cimg src\\u003d\\\"http://i.imgur.com/BGepRkw.gif\\\" alt\\u003d\\\"Tissue visualization\\\" width\\u003d\\\"434\\\" height\\u003d\\\"152\\\" /\\u003e Tissue visualization (from Impedimed) [/caption]\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"434\\\"]\\u003cimg src\\u003d\\\"http://i.imgur.com/qn47z8T.png\\\" alt\\u003d\\\"Model Circuit\\\" width\\u003d\\\"434\\\" height\\u003d\\\"152\\\" /\\u003e Model Circuit[/caption]\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"720\\\"]\\u003cimg src\\u003d\\\"http://i.imgur.com/Ln3fFfg.png\\\" alt\\u003d\\\"Raw Data Coming in over BLE plotted in Real Time (Model Circuit 1)\\\" width\\u003d\\\"720\\\" height\\u003d\\\"1280\\\" /\\u003e Raw Data Coming in over BLE plotted in Real Time (Model Circuit 1)[/caption]\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"720\\\"]\\u003cimg src\\u003d\\\"http://i.imgur.com/NwUjY6I.png\\\" alt\\u003d\\\"Measured and fitted data plots. Ri \\u003d 1 K, Re \\u003d 680, C \\u003d 4.7 nF\\\" width\\u003d\\\"720\\\" height\\u003d\\\"1280\\\" /\\u003e Measured and fitted data plots. Ri \\u003d 1 KΩ, Re \\u003d 680 Ω, C \\u003d 4.7 nF all values are ± 5%[/caption]\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"720\\\"]\\u003cimg src\\u003d\\\"http://i.imgur.com/fJlwjsc.png\\\" alt\\u003d\\\"Raw Data Coming in over BLE plotted in Real Time (Model Circuit 2)\\\" width\\u003d\\\"720\\\" height\\u003d\\\"1280\\\" /\\u003e Raw Data Coming in over BLE plotted in Real Time (Model Circuit 2)[/caption]\\n\\n[caption id\\u003d\\\"\\\" align\\u003d\\\"aligncenter\\\" width\\u003d\\\"720\\\"]\\u003cimg src\\u003d\\\"http://i.imgur.com/inPDxWo.png\\\" alt\\u003d\\\"Measured and fitted data plots. Ri \\u003d 1.3 K, Re \\u003d 470, C \\u003d 6.8 nF\\\" width\\u003d\\\"720\\\" height\\u003d\\\"1280\\\" /\\u003e Measured and fitted data plots. Ri \\u003d 1.3 KΩ, Re \\u003d 470 Ω, C \\u003d 6.8 nF all vales are ± 5%[/caption]\\n\\nThe AD5933 was calibrated in this run with a 480 Ohm resistor, so the measurements are more accurate for impedances in this realm. Should one want to make the AD5933 more robust, a multiplexer connected to a wider range of calibration resistors should be used.",
            "tags": [
                "Accelerometer",
                "Android",
                "Arduino",
                "BLE112",
                "Bluetooth",
                "Bluetooth 4.0"
            ],
            "category": "Technology"
        },
        {
            "title": "AD5933 Arduino Serial Monitor Interface",
            "stringDate": "01-28-2015 11:57:41",
            "dc:creator": "tjdah10",
            "body": "If you don\\u0027t happen to have an Android phone, or an Android phone that has BLE support and you still want to work with Analog Device\\u0027s AD5933, I\\u0027ve written an Arduino sketch that allows one to interface with the AD5933 through the serial monitor on a hosting PC.\\n\\nThe sketch is available \\u003ca href\\u003d\\\"https://github.com/WuMRC/drive/tree/master/AD5933%20Serial%20Comms\\\"\\u003ehere\\u003c/a\\u003e.\\n\\nHave fun!",
            "tags": [
                "AD5933",
                "Arduino"
            ],
            "category": "Technology"
        },
        {
            "title": "Tinyduino BLE and Accelerometer demo",
            "stringDate": "02-10-2015 07:32:00",
            "dc:creator": "tjdah10",
            "body": "A demo sketch that carries Bosch\\u0027s BMA250 accelerometer data over BLE specifically for the TinyDuino BLE shield and accelerometer shield.\\n\\nThe sketch is available here: \\u003ca href\\u003d\\\"https://github.com/tunjid/BLE\\\"\\u003eSketch\\u003c/a\\u003e\\n\\nAn android app for it is available here: \\u003ca href\\u003d\\\"https://github.com/WuMRC/drive/tree/master/Android%20App\\\"\\u003eApp\\u003c/a\\u003e\\n\\nNote the app was designed for a more complex sketch, therefore all the functions in the app such as \\\"Sample Rate\\\" and \\\"Frequency Sweep\\\" will not be available. You can still export accelerometer data from the app to the phone\\u0027s SD Card however.\\n\\nHave fun!",
            "tags": [
                "Arduino",
                "BLE112",
                "BlueGiga",
                "Bluetooth",
                "Bluetooth 4.0",
                "Bluetooth Smart",
                "Bosch",
                "TinyDuino",
                "UART"
            ],
            "category": "Technology"
        },
        {
            "title": "Controlling a USBTMC device with a Python Script",
            "stringDate": "02-23-2015 10:02:34",
            "dc:creator": "tjdah10",
            "body": "Recently I\\u0027ve needed to read the values of an i2c digital potentiometer for all 64 steps, using the Agilent e4980a precision LCR meter. The problem is, control of the LCR and logging of the data is typically implemented through LabVIEW, software I don\\u0027t know how to use, and I don\\u0027t have at my beck and call.\\n\\nFortunately, the LCR supports the USBTMC standard and there happens to be a Python library for USBTMC. The following Python script uses nested for loops to ask an Arduino Uno to increase the wiper position for a rheostat, and then triggers the LCR and records the impedance of the rheostat at 99 AC frequencies for all 64 steps.\\n\\nThings needed:\\n\\n\\u003ca href\\u003d\\\"https://github.com/python-ivi/python-usbtmc\\\"\\u003eUSBTMC Python Library\\u003c/a\\u003e To control USBTMC devices\\n\\n\\u003ca href\\u003d\\\"http://walac.github.io/pyusb/\\\"\\u003ePyUSB\\u003c/a\\u003e For Python USB control\\n\\n\\u003ca href\\u003d\\\"http://www.libusb.org/\\\"\\u003eLiUSB 1.0\\u003c/a\\u003e C USB Library\\n\\nYour Python IDE of choice (I\\u0027m using \\u003ca href\\u003d\\\"http://pydev.org/\\\"\\u003ePyDev\\u003c/a\\u003e)\\n\\n\\u003ca href\\u003d\\\"http://pyserial.sourceforge.net/\\\"\\u003ePySerial\\u003c/a\\u003e To write and read from Arduino\\u0027s serial\\n\\nOnce you have that sorted, the Python script is straightforward.\\n\\u003cblockquote\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003efrom\\u003c/span\\u003e time \\u003cspan class\\u003d\\\"s1\\\"\\u003eimport\\u003c/span\\u003e sleep\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003eimport\\u003c/span\\u003e usbtmc\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003eimport\\u003c/span\\u003e serial\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003elcr \\u003cspan class\\u003d\\\"s2\\\"\\u003e\\u003d\\u003c/span\\u003e usbtmc.Instrument\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e2391\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s2\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s4\\\"\\u003e2313\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003eArduino \\u003cspan class\\u003d\\\"s2\\\"\\u003e\\u003d\\u003c/span\\u003e serial.Serial\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s5\\\"\\u003e\\u0027/\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s6\\\"\\u003edev\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s5\\\"\\u003e/tty.usbmodem1421\\u0027\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s2\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s4\\\"\\u003e38400\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s2\\\"\\u003e,\\u003c/span\\u003e timeout\\u003cspan class\\u003d\\\"s2\\\"\\u003e\\u003d\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e10\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003efor\\u003c/span\\u003e i \\u003cspan class\\u003d\\\"s1\\\"\\u003ein\\u003c/span\\u003e range\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s2\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s4\\\"\\u003e4\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e:\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p3\\\"\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e    \\u003c/span\\u003e\\u003c/span\\u003eprint\\u003cspan class\\u003d\\\"s3\\\"\\u003e()\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e    \\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003efor\\u003c/span\\u003e R1 \\u003cspan class\\u003d\\\"s1\\\"\\u003ein\\u003c/span\\u003e range\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s2\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s4\\\"\\u003e64\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e:\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p4\\\"\\u003e\\u003cspan class\\u003d\\\"s7\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e        \\u003c/span\\u003e\\u003c/span\\u003e# Instruct \\u003cspan class\\u003d\\\"s8\\\"\\u003eArduino\\u003c/span\\u003e to change \\u003cspan class\\u003d\\\"s8\\\"\\u003erheostat\\u003c/span\\u003e wiper\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e        \\u003c/span\\u003eArduino.write\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eb\\u003cspan class\\u003d\\\"s5\\\"\\u003e\\u00271\\u0027\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e        \\u003c/span\\u003esleep\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e0.1\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e        \\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003efor\\u003c/span\\u003e f \\u003cspan class\\u003d\\\"s1\\\"\\u003ein\\u003c/span\\u003e range\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s2\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s4\\\"\\u003e99\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e:\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e            \\u003c/span\\u003elcr.write\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s5\\\"\\u003e\\\":TRIG:IMM\\\"\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e            \\u003c/span\\u003elcr.last_btag \\u003cspan class\\u003d\\\"s2\\\"\\u003e\\u003d\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s4\\\"\\u003e0\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e            \\u003c/span\\u003esleep\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e0.01\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e            \\u003c/span\\u003edata \\u003cspan class\\u003d\\\"s2\\\"\\u003e\\u003d\\u003c/span\\u003e lcr.ask\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s5\\\"\\u003e\\\"FETC:IMP:FORM?\\\"\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e            \\u003c/span\\u003esleep\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s4\\\"\\u003e0.01\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003e\\u003cspan class\\u003d\\\"Apple-converted-space\\\"\\u003e            \\u003c/span\\u003e\\u003cspan class\\u003d\\\"s1\\\"\\u003eprint\\u003c/span\\u003e\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003estr\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003eR1\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s2\\\"\\u003e+\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s5\\\"\\u003e\\\",\\\"\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s2\\\"\\u003e+\\u003c/span\\u003e str\\u003cspan class\\u003d\\\"s3\\\"\\u003e(\\u003c/span\\u003ef\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s2\\\"\\u003e+\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s5\\\"\\u003e\\\",\\\"\\u003c/span\\u003e \\u003cspan class\\u003d\\\"s2\\\"\\u003e+\\u003c/span\\u003e data\\u003cspan class\\u003d\\\"s3\\\"\\u003e)\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003c/blockquote\\u003e\\n\\u003cp class\\u003d\\\"p1\\\"\\u003eThe companion Arduino code is:\\u003c/p\\u003e\\n\\n\\u003cblockquote\\u003e#include \\\"Wire.h\\\"\\n#include \\\"AD5258.h\\\" //Library for AD5258 functions (must be installed)\\n\\n#define SSR 11\\n#define indicator_LED 12\\nAD5258 digipot; // rheostat r1\\nuint8_t wiper \\u003d 0;\\n\\nvoid setup() {\\nSerial.begin(38400);\\nWire.begin();\\n\\npinMode(indicator_LED, OUTPUT);\\n\\ndigipot.begin(1); // Specify i2c address for digipot\\nSerial.println();\\n}\\n\\nvoid loop() {\\n\\nif (Serial.available()) {\\nuint8_t ch \\u003d Serial.read();\\nuint8_t status;\\n\\nif (ch \\u003d\\u003d \\u00270\\u0027) {\\ndigitalWrite(indicator_LED, LOW);\\nSerial.println(\\\"Switch off.\\\");\\n}\\n\\nif (ch \\u003d\\u003d \\u00271\\u0027) {\\nif(wiper \\u003d\\u003d 64) {\\nwiper \\u003d 0;\\n}\\ndigitalWrite(indicator_LED, HIGH);\\ndigipot.writeRDAC(wiper);\\nSerial.print(\\\"Triggered. wiper is at \\\");\\nSerial.println(wiper);\\nwiper++;\\n}\\n\\n} // end if serial available\\n} // end main loop\\u003c/blockquote\\u003e\\nIt works a charm and makes experimentation so much easier and faster.",
            "tags": [
                "Agilent",
                "Arduino",
                "Control",
                "e4980a",
                "LabVIEW",
                "LCR",
                "Python",
                "Serial Library",
                "USBTMC"
            ],
            "category": "Technology"
        },
        {
            "title": "Implementing a \"Swipe\" and \"Finger Up\" listener for  Android's SwipeRefreshLayout",
            "stringDate": "04-09-2015 09:29:22",
            "dc:creator": "tjdah10",
            "body": "Android\\u0027s SwipeRefreshLayout is pretty useful for internet based apps that need to notify a user when a pull to refresh action has occurred. However, if you have a complex view hierarchy that uses a FrameLayout to draw certain items over another, say for example a contextual toolbar, the circular ProgressBar drawn by the SwipeRefreshLayout is obscured and hidden from the user.\\n\\nA way to fix this is to create a class that extends the SwipeRefreshLayout, and Override the OnTouchEvent. Once overridden, call on the superclass to make sure the widget performs as intended, keep the boolean it returns in a local variable, and handle the motion events which will in turn fire off an interface callback when certain conditions are met.\\n\\nIt\\u0027s not complicated when presented in code form. The extended class is shown in it\\u0027s entirety below\\n\\nhttps://gist.github.com/tunjid/3ff00ca6bb0a8d27fa3c",
            "tags": [
                "Android",
                "FrameLayout",
                "MotionEvent",
                "SwipeRefreshLayout",
                "View"
            ],
            "category": [
                "Design",
                "Technology"
            ]
        },
        {
            "title": "AdvancedRecyclerViewDemo",
            "stringDate": "04-26-2015 04:06:29",
            "dc:creator": "tjdah10",
            "body": "The \\u003ca href\\u003d\\\"https://github.com/h6ah4i/android-advancedrecyclerview\\\"\\u003eAdvancedRecyclerView Library\\u003c/a\\u003e is incredible. It has support for so many niceties, it\\u0027s almost indispensable. Unfortunately, documentation is sparse.\\n\\nI wrote a quick demo for the draggable and swipable functions of the library that may be perused below. I plan to add support for the expandable items in the future. So, if you happen to need some documentation for the library, click the link below.\\n\\n\\u003ca href\\u003d\\\"https://github.com/tunjid/AdvancedRecyclerViewDemo\\\"\\u003eDemo\\u003c/a\\u003e",
            "tags": [
                "Android",
                "Design",
                "development",
                "UI",
                "UX"
            ],
            "category": [
                "Design",
                "Technology"
            ]
        },
        {
            "title": "Android's FragmentManager",
            "stringDate": "11-29-0002 07:00:00",
            "dc:creator": "tjdah10",
            "body": "\\u003cpre\\u003e@Override\\npublic void onNavigationDrawerItemSelected(int position) {\\n    // update the main content by replacing fragments\\n    FragmentManager fragmentManager \\u003d getSupportFragmentManager();\\n    FragmentTransaction fragmentTransaction \\u003d fragmentManager.beginTransaction();\\n    //toolbar.setBackgroundColor(getResources().getColor(R.color.primary));\\n\\n    Log.i(TAG, \\\"BackStackEntry count: \\\" + fragmentManager.getBackStackEntryCount());\\n    if (fragmentManager.getFragments() !\\u003d null){\\n        Log.i(TAG, \\\"FragmentManager Fragment count: \\\" + fragmentManager.getFragments().size());\\n        for(Fragment f : fragmentManager.getFragments()) {\\n            if(f.getTag() !\\u003d null) {\\n                Log.i(TAG, \\\"Fragment TAG: \\\" + f.getTag());\\n            }\\n            else {\\n                Log.i(TAG, \\\"Fragment ID: \\\" + f.getId());\\n            }\\n        }\\n    }\\n\\n    switch (position + 1) { // By default, the NavigationDrawer starts at 0.\\n        case BEST_OF:\\n            fragmentTransaction\\n                   //.addToBackStack(BEST_OF_TAG)\\n                    .replace(R.id.container,\\n                            (bestOfFragment \\u003d\\u003d null) ? BestOfFragment.newInstance(BEST_OF) : bestOfFragment, BEST_OF_TAG);\\n            currentFragment \\u003d BEST_OF;\\n            break;\\n        case PROFILE:\\n            fragmentTransaction\\n                    //.addToBackStack(PROFILE_TAG)\\n                    .replace(R.id.container,\\n                            (profileFragment \\u003d\\u003d null) ? ProfileFragment.newInstance(PROFILE, user) : profileFragment, PROFILE_TAG);\\n            currentFragment \\u003d PROFILE;\\n            break;\\n        case COMMUNITY:\\n            fragmentTransaction\\n                    //.addToBackStack(COMMUNITY_TAG)\\n                    .replace(R.id.container,\\n                            (communityFragment \\u003d\\u003d null) ? CommunityFragment.newInstance(COMMUNITY) : communityFragment, COMMUNITY_TAG);\\n            currentFragment \\u003d COMMUNITY;\\n            break;\\n        case SEARCH:\\n            fragmentTransaction\\n                    //.addToBackStack(SEARCH_TAG)\\n                    .replace(R.id.container,\\n                            (searchFragment \\u003d\\u003d null) ? SearchFragment.newInstance(SEARCH) : searchFragment, SEARCH_TAG);\\n            currentFragment \\u003d SEARCH;\\n            break;\\n        case SETTINGS:\\n            fragmentTransaction\\n                    //.addToBackStack(SETTINGS_TAG)\\n                    .replace(R.id.container,\\n                            (settingsFragment \\u003d\\u003d null) ? SettingsFragment.newInstance(SETTINGS) : settingsFragment, SETTINGS_TAG);\\n            currentFragment \\u003d SETTINGS;\\n            break;\\n        case FEEDBACK:\\n            fragmentTransaction\\n                    //.addToBackStack(FEEDBACK_TAG)\\n                    .replace(R.id.container,\\n                            (feedbackFragment \\u003d\\u003d null) ? FeedbackFragment.newInstance(FEEDBACK) : feedbackFragment, FEEDBACK_TAG);\\n            currentFragment \\u003d FEEDBACK;\\n            break;\\n        default:\\n            fragmentTransaction\\n                    .replace(R.id.container, FeedbackFragment.newInstance(FEEDBACK), FEEDBACK_TAG);\\n            break;\\n    }\\n    fragmentTransaction.commit();\\n}\\u003c/pre\\u003e",
            "category": "Uncategorized"
        }
    ];
};